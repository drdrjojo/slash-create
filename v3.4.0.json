{"meta":{"version":"2.0.1","format":20,"date":1627333088084},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n\n<img src=\"/static/textlogo.png\" height=\"50\">\n\n[![NPM version](https://img.shields.io/npm/v/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![NPM downloads](https://img.shields.io/npm/dt/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![ESLint status](https://github.com/Snazzah/slash-create/workflows/ESLint/badge.svg)](https://github.com/Snazzah/slash-create/actions?query=workflow%3A%22ESLint%22) [![DeepScan grade](https://deepscan.io/api/teams/11596/projects/15103/branches/297399/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=11596&pid=15103&bid=297399) [![discord chat](https://img.shields.io/discord/311027228177727508?logo=discord&logoColor=white)](https://snaz.in/discord)\n\nCreator and handler for Discord's [slash commands](https://discord.com/developers/docs/interactions/slash-commands).\n\nYou can create commands similar to Discord.JS [Commando](https://github.com/discordjs/Commando).\n\n\n</div>\n\n## Features\n- Multiple server support ([Express](http://expressjs.com/), [Fastify](https://fastify.io/), etc.)\n- Hook into an existing Discord bot client\n- Command syncing - Sync commands with your creator automatically.\n- Load commands from a folder\n- Command throttling/cooldowns\n\n## Quickstart\nIf you want an easy start on getting slash commands on your bot, you can use the [Snazzah/slash-create-template](https://github.com/Snazzah/slash-create-template) template.\n```sh\nnpx degit Snazzah/slash-create-template slash-commands\ncd slash-commands\nnpm i -g yarn\nyarn\ncp .env.example .env # this copies the .env file, edit variables in this file!\n```\nAfter installing, you can edit commands to your liking and start it up with `yarn start`.\n\n## Installation\n```sh\nnpm i slash-create\n```\nOr, using yarn:\n```sh\nyarn add slash-create\n```\n\n### Using webservers\nIn order to use a specific webserver, you will need to install the dependency associated with that server. The following server types require these dependencies:\n- `AWSLambdaServer`: none technically, meant for use with [AWS Lambda](https://aws.amazon.com/lambda) and [Amazon API Gateway](https://aws.amazon.com/api-gateway), see [example](https://slash-create.js.org/#/docs/main/latest/examples/lambda)\n- `AzureFunctionServer`: none technically, meant for use with [Azure Functions](https://docs.microsoft.com/en-us/azure/azure-functions/), see [example](https://slash-create.js.org/#/docs/main/latest/examples/azure)\n- `ExpressServer`: `express`\n- `FastifyServer`: `fastify`\n- `GatewayServer`: none, see [example](https://slash-create.js.org/#/docs/main/latest/examples/discord-bot)\n- `GCFServer`: none technically, meant for use with [`@google-cloud/functions-framework`](https://npm.im/@google-cloud/functions-framework), see [example](https://slash-create.js.org/#/docs/main/latest/examples/gcf)\n\n## Examples\n- [Creating a SlashCreator](https://slash-create.js.org/#/docs/main/latest/examples/basic)\n  - [Using Webservers](https://slash-create.js.org/#/docs/main/latest/examples/webserver)\n    - [Using `AWSLambdaServer`](https://slash-create.js.org/#/docs/main/latest/examples/lambda)\n    - [Using `AzureFunctionServer`](https://slash-create.js.org/#/docs/main/latest/examples/azure)\n    - [Using `GCFServer`](https://slash-create.js.org/#/docs/main/latest/examples/gcf)\n  - [Using Discord Bots](https://slash-create.js.org/#/docs/main/latest/examples/discord-bot)\n- [Creating commands](https://slash-create.js.org/#/docs/main/latest/examples/command)\n\n## Useful Links\n- [**Discord Documentation on Slash Commands**](https://discord.com/developers/docs/interactions/slash-commands)\n- [Website](https://slash-create.js.org/) ([source](https://github.com/Snazzah/slash-create-website))\n- [Documentation](https://slash-create.js.org/#/docs/main/latest/general/welcome)\n- [Commands Template](https://github.com/Snazzah/slash-create-template)\n- [GitHub](https://github.com/Snazzah/slash-create)\n- [NPM](https://www.npmjs.com/package/slash-create)\n\n<div align=\"center\">\n    <a target=\"_blank\" href=\"https://snaz.in/discord\" title=\"Join the Discord!\">\n        <img  src=\"https://discordapp.com/api/guilds/311027228177727508/widget.png?style=banner2\" height=\"76px\" draggable=\"false\" alt=\"Join the Discord!\">\n    </a>\n</div>\n\n##### Resources & References\nThis project borrows resources and references from the following repositories:\n- [dbots.js](https://github.com/dbots-pkg/dbots.js)\n- [eris](https://github.com/abalabahaha/eris)\n- [discord.js](https://github.com/discordjs/discord.js)\n- [Commando](https://github.com/discordjs/Commando)\n- [slash-worker](https://github.com/A5rocks/slash-worker)\n- [slash-commands](https://github.com/MeguminSama/discord-slash-commands)\n- [discord-interactions](https://github.com/discord/discord-interactions-js)\n","path":"README.md"},"faq":{"name":"FAQ","type":"md","content":"# FAQ\n\n## Terminology\n\n### What are **initial messages**?\nAny first response sent out during the \"Sending command...\" message. The initial response can be a plain message or a deferred message.\n\n### What is a **deferred message**?\nA deferred message is an acknowlegement that the message will soon be edited later on. A deferred message has been sent if the response is the \"Bot is thinking...\" message.\n\n## Common Problems\n\n### `ts-node` can't load commands from folders!\n`ts-node` only compiles other TypeScript files that are imported directly and because of this, no other files are compiled and therefore not recognized. You will need to use `tsc` in order to compile everything or try [ts-devscript](https://npm.im/ts-devscript) for development environments.\n\n### My attachments aren't showing!\nAttachments cannot be sent within **ephemeral messages** and **initial messages**. You should also make sure that the files are sending **buffers**.\n\n```js\nctx.send({\n  content: 'hello',\n  file: {\n    name: 'avatar.png',\n    file: fs.readFileSync('avatar.png')\n  }\n});\n```\n### How do I edit the original message from a component context?\nUse `ctx.editParent` rather than `ctx.editOriginal`.\n\n`ctx.editOriginal` edits the first sent message by the component context, while `ctx.editParent` edits the message that has the component.\n\n### How do I remove the component buttons after they click it?\n```js\nawait ctx.editParent('You clicked the button!', { components: [] });\n```\n\n## External Libraries\n\n### How can I get the client from my slash command?\nslash-create does not support passing a client through the command context, since the library is also used for webservers.\nYou can do either of the following work-arounds:\n\n#### Extend the Command Class\nThis requires you to manually register the command as `registerCommandsIn` will fail with commands with these constructor parameters.\n```js\n// bot.js\nconst Discord = require('discord.js');\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst ClientCommand = require('./commands/command.js');\n\nconst client = new Discord.Client({ /* ... */ });\nconst creator = new SlashCreator({ /* ... */ });\ncreator\n    .registerCommand(new ClientCommand(client, creator))\n    // ...\n```\n```js\n// commands/command.js\nconst { SlashCommand } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n    constructor(client, creator, opts) {\n        super(creator, opts);\n        this.client = client;\n    }\n\n    // now you can use this.client ...\n}\n```\n\n#### Putting the Client in the Creator\nThis does nothing to the creator, however doing this in TypeScript will result in errors.\n```js\n// bot.js\nconst Discord = require('discord.js');\nconst { SlashCreator, GatewayServer } = require('slash-create');\n\nconst client = new Discord.Client({ /* ... */ });\nconst creator = new SlashCreator({ /* ... */ });\ncreator.client = client;\n// ...\n```\n```js\n// commands/command.js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\nconst client = require('../bot.js');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  // ...\n  async run(ctx) {\n    const client = ctx.creator.client;\n    // do stuff with the client...\n  }\n}\n```\n\n### MessageEmbed files don't work with this!\nslash-create doesn't support `discord.js`'s MessageEmbed out of the box.\nYou can still use the builder as such, however any files attached to the builder will not be handled and should be included in the message options instead.\n```js\n// Regular embed\nconst embed = new Discord.MessageEmbed()\n  .setTitle('Hi')\n  .setColor('RANDOM')\n  .setTimestamp()\n  .setDescription('Hello');\n\nctx.send([\n  embeds: [embed]\n])\n```\n```js\n// Embed with files\nconst embed = new Discord.MessageEmbed()\n  .setTitle('Look at this image')\n  .setImage('attachment://coolimage.png');\n\nctx.send([\n  embeds: [embed],\n  file: {\n    name: 'coolimage.png',\n    file: fs.readFileSync('coolimage.png')\n  }\n])\n```\n\n### My bot sent a message but it's still thinking.\nMake sure that you have updated `slash-create` to the latest version. There is a pretty good chance you are **creating the message outside of the interaction**, which does not show that the interaction has been completed. (by editing the deferred message or using `ctx.send`)\n\n**Please make sure to use `ctx.send` or return a message (string or MessageOptions) when finishing your command interaction. Any `.send` functions outside of `ctx` will not finish the interaction.**\n","path":"docs/general/faq.md"},"changelog":{"name":"Changelog","type":"md","content":"# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n## [3.4.0] - 2021-07-26\n### Changed:\n- Component callbacks have been changed internally to support other message IDs. ([#84](https://github.com/Snazzah/slash-create/pull/84))\n- Follow-up messages can now be ephemeral. ([#83](https://github.com/Snazzah/slash-create/issues/83), [10ba62d](https://github.com/Snazzah/slash-create/commit/10ba62d))\n- The FollowUpMessageOptions type def is deprecated.\n- [`ComponentSelectOption.description`](https://slash-create.js.org/#/docs/main/v3.4.0/class/ComponentSelectOption) is now optional ([#80](https://github.com/Snazzah/slash-create/pull/80))\n### Added:\n- Azure Functions Server ([#82](https://github.com/Snazzah/slash-create/pull/82))\n- [`MessageInteractionContext.registerComponentFrom`](https://slash-create.js.org/#/docs/main/v3.4.0/class/MessageInteractionContext?scrollTo=registerComponentFrom) to register components from other messages. ([#84](https://github.com/Snazzah/slash-create/pull/84))\n## [3.3.0] - 2021-07-02\n### Added:\n- Option to manually handle command interactions (`SlashCreatorOptions.handleCommandsManually`)\n  - If this is enabled, all command interactions will be sent through the `commandInteraction` event.\n- Support for Select Components\n  - Types `ComponentSelectMenu` and `ComponentSelectOption` are exported to the index\n  - `ComponentActionRow` now accepts `ComponentSelectMenu`\n  - Added `SELECT` to enum `ComponentType`\n  - Added `ComponentSelectMenu` as a component alternative of `AnyComponent`\n  - Added `values` property to `ComponentContext`\n## [3.2.3] - 2021-05-30\nHotfix for 3.2.2\n## [3.2.2] - 2021-05-30\n### Fixed:\n- Crashing on bad 429 responses ([31f4257](https://github.com/Snazzah/slash-create/commit/31f4257))\n- `syncGlobalCommands` and `syncCommandsIn` checks for changes before updateing ([fe41d87](https://github.com/Snazzah/slash-create/commit/fe41d87))\n## [3.2.1] - 2021-05-27\n### Fixed:\n- Fixed not having numbers allowed in option names\n## [3.2.0] - 2021-05-27\n### Changed:\n- `CommandContext` and `ComponentContext` are now under a parent class: `MessageInteractionContext`\n- `InterationResponseType` -> `InteractionResponseType`\n### Added:\n- Support for buttons in messages, see [docs](https://slash-create.js.org/#/docs/main/v3.2.0/examples/components) ([#59](https://github.com/Snazzah/slash-create/pull/59))\n- [`SlashCommand.onUnload`](https://slash-create.js.org/#/docs/main/v3.2.0/class/SlashCommand?scrollTo=onUnload)\n- Types `MessageOptions`, `EditMessageOptions`, `FollowUpMessageOptions`, and `MessageFile` are exported to the index\n- [`SlashCreator.cleanRegisteredComponents`](https://slash-create.js.org/#/docs/main/v3.2.0/class/SlashCreator?scrollTo=cleanRegisteredComponents)\n- Support for AWS Lambda, see [docs](https://slash-create.js.org/#/docs/main/v3.2.0/examples/lambda) ([#61](https://github.com/Snazzah/slash-create/pull/61), @ytausch)\n- `CommandOptionType.MENTIONABLE = 9`\n- Types for message embeds and attachments\n### Fixed:\n- Removed ConvertedOption type\n- Added peer dependency meta, which should remove the warning while installing\n## [3.1.0] - 2021-04-16\n### Changed:\n- Removed webserver timeout.\n### Added:\n- `USE_APPLICATION_COMMANDS` and `REQUEST_TO_SPEAK` to the permissions bitfield.\n- Slash Command Permissions ([#48](https://github.com/Snazzah/slash-create/pull/48))\n  - Commands now have an `ids` Map, populated upon syncing (or with `SlashCreator#collectCommandIDs`). This pairs the IDs of guild IDs and `'global'` to the command ID from the API.\n  - `SlashCommandOptions#defaultPermissions`\n  - You can define permissions in `SlashCommandOptions#permissions`, [See here](https://slash-create.js.org/#/docs/main/v3.1.0/examples/command) for an example.\n- Fetching messages with `CommandContext#fetch` ([9c876f4](https://github.com/Snazzah/slash-create/commit/9c876f448808120b5599e8af6d0d36f328771a81))\n- `Message#interaction` and `Message#messageReference`\n### Fixed:\n- Typing for `SlashCreatorAPI#updateCommands`\n\n\n## [3.0.1] - 2021-03-29\n### Fixed:\n- Updated command option validation\n  - Command names and option names use the documented regex pattern\n  - Choice name is now 1-32 characters\n  - Choice description is now 1-100 characters\n- Allow empty payloads when updating commands\n- Prevent webservers from auto-handling interaction errors\n\n## [3.0.0] - 2021-03-25\n### Removed:\n- **[BREAKING]** `SlashCreatorOptions#autoAcknowledgeSource` has been removed.\n- **[BREAKING]** `MessageOptions#includeSource` is removed.\n- **[BREAKING]** `InteractionResponseType.ACKNOWLEDGE` and `InteractionResponseType.CHANNEL_MESSAGE` has been removed\n- `Util.objectKeySort` is now removed.\n\n### Changed:\n- **[BREAKING]** `CommandContext#acknowledge` -> `CommandContext#defer`\n  - Deferred messages are like acknowledgements, but editable and used for processing requests.\n  - `CommandContext#defer` has one argument (`ephemeral`) for if the deferred message should be ephemeral.\n- Docs now refer \"auto-acknowledge\" to \"auto-defer\"\n- Command option and subcommand limit has increased to 25\n- `CommandContext#send` now edits a deferred message if there was a deferred message sent.\n- **[BREAKING]** `InteractionResponseType.ACKNOWLEDGE_WITH_SOURCE` -> `InteractionResponseType.DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE`\n\n### Added:\n- `SlashCommandOptions#deferEphemeral` - Whether auto-deferring should be an ephemeral message.\n- `CommandContext#deferred` - Whether the initial response has an available deferred message.\n- Ability to send attachments with `CommandContext#send`\n- Added FAQ page in documentation\n### Fixed:\n- Documentation for ResolvedMembers\n- `SlashCommand#onBlock` and `SlashCommand#onError` giving weird return types in documentation\n\n## [2.1.2] - 2021-03-16\n### Changed:\n- `Util.objectKeySort` is now deprecated.\n### Fixed:\n- Syncing commands had a major bug, sorry. ([#36](https://github.com/Snazzah/slash-create/pull/36))\n\n## [2.1.1] - 2021-03-06\n### Changed:\n- Types for most of the command options reflect on how reliable the `type` property is.\n### Fixed:\n- Removed checking the `type` property within options to check for subcommand array and options. Not all clients send this type and should not be reliable.\n\n## [2.1.0] - 2021-02-19\n### Changed:\n- Typings for command options have the `type` prop\n- `CommandOption` is deprecated\n- `CommandStringOption`, `CommandIntegerOption`, `CommandBooleanOption` are in the index\n### Added:\n- CommandContexts now support resolved objects\n  - `CommandContext#members`, `CommandContext#users`, `CommandContext#roles`, `CommandContext#channels`\n  - Note: `ResolvedMember`s in `CommandContext#members` do not have `mute`, `deaf` and `permissions` properties.\n### Fixed:\n- Updated interaction data typings with the `type` prop\n\n## [2.0.0] - 2021-02-11\n### Changed:\n- The typings for `DMInteractionRequestData` and `GuildInteractionRequestData` is in the index.\n- The typing for `InteractionRequestData` is now a **type** rather than an **interface**.\n- The `ping` event now has a `user` parameter.\n- **[BREAKING]** `CommandContext#member` and `CommandContext#guildID` is now only given in a guild context.\n- **[BREAKING]** `guildID` in command options is now `guildIDs`.\n- **[BREAKING]** `SlashCommand#guildID` has been replaced with `SlashCommand#guildIDs`.\n### Added:\n- Support for updating commands in bulk. This is now used in syncing.\n- Support for multiple guild IDs in a command class.\n    - `CommandOptions#guildIDs` can either be a string or an array of strings.\n- Support for direct message commands.\n  - `CommandContext#user` can be used in DM and guild contexts.\n### Fixed:\n- Unnessesary command updating while syncing.\n\n## [1.3.0] - 2021-01-04\n### Changed:\n- Permission bitfield now uses bigints\n- Command syncing now uses `lodash.isEqual` to check for\n- `publicKey` in creator options is now optional\n- Typing changes\n  - `CommandOption` in constants has split off into `CommandSubcommandOption` and `AnyCommandOption`, not allowing you to define options and a value.\n  - Typings for `User`, `Member` and `Message` have been set to read-only\n  - Most undocumented typings are hidden/privated\n- Export changes\n  - Some constant exports now exports to index: `InteractionType`, `InterationResponseType`, `InteractionResponseFlags`, `CommandOptionType`, `PartialApplicationCommand`, `ApplicationCommand`, `ApplicationCommandOption`, `ApplicationCommandOptionChoice`, `RawRequest`, `AnyRequestData`, `PingRequestData`, `InteractionRequestData`, `CommandMember`, `CommandUser`, `CommandData`, `AnyCommandOption`, `CommandOption`, `CommandSubcommandOption`, `ImageFormat`\n  - `ConvertedOption` now exports to index\n  - `SlashCommandOptions` now exports to index\n### Added:\n- Commands will automatically acknowledge after 3 seconds to avoid interaction invalidation\n  - You can also set `autoAcknowledgeSource` within creator options\n- Documentation for unknown commands\n- `Member#pending`\n### Fixed:\n- SlashCreator documentation\n- Option validation for unknown commands\n- Typings are ignored for `express` and `fastify`\n\n## [1.2.0] - 2020-12-19\n### Changed:\n- `ctx.options` are a bit more consistent with sub-commands. Check the [last heading in the documetation](https://slash-create.js.org/#/docs/main/v1.2.0/general/context-options) for an example.\n### Added:\n- Support for registering/unregistering commands\n  - New `SlashCreator` event: `commandUnregister`\n  - New `SlashCreator` event: `commandReregister`\n  - `SlashCreator.reregisterCommand(command, oldCommand)`\n  - `SlashCreator.unregisterCommand(command)`\n  - `SlashCommand.reload()`\n  - `SlashCommand.unload()`\n- Unknown Commands\n- [Support for Google Cloud Functions](https://slash-create.js.org/#/docs/main/v1.2.0/examples/gcf). (`GCFServer`)\n### Fixed:\n- Some documentation\n- Command finalization\n- Command throttling\n- Command options validation\n\n## [1.1.6] - 2020-12-18\n### Fixed:\n- Sending options as the first argument in `Context#send` & `Context#sendFollowUp`\n\n## [1.1.5] - 2020-12-18\n### Fixed:\n- Sending options as the first argument in `Context#edit`\n\n## [1.1.4] - 2020-12-17\n### Changed:\n- Added more validation for options\n### Added:\n- `CommandContext#subcommands`\n### Fixed:\n- Option choices validation\n\n## [1.1.3] - 2020-12-17\n### Changed:\n- Errors in `SlashCreator#startServer` are no longer caught.\n- The default port is now `8030`.\n- Some documentation clarifying things like tokens.\n### Fixed:\n- Moved `typed-emitter` to dependencies, fixing typings\n\n## [1.1.2] - 2020-12-17\n### Fixed:\n- Race conditions for command finalization\n- Errors in `SlashCommand#onError` goes to `SlashCreator#error`\n\n## [1.1.1] - 2020-12-17\n### Changed:\n- `CommandContext#options` is now a non-null object\n### Fixed:\n- Loading commands in a folder\n\n## [1.1.0] - 2020-12-17\nThis release features mostly completed documentation and changes to the packages typings. If you are using TypeScript for this package, consider this a **breaking change**.\n### Changed:\n- **[SEMI-BREAKING]** Index changes\n  - `Command` -> `SlashCommand`\n  - `Creator` -> `SlashCreator`\n  - `CommandContext` is aliased as `Context`\n  - `SlashCommand` is aliased as `Command`\n  - `SlashCreator` is aliased as `Creator`\n  - If you are using any of the changed classes for typings, you must use its class name.\n    - i.e. `{ Creator }` must be `{ SlashCreator }`\n- (typings) Renamed `AllRequestData` to `AnyRequestData`\n- (typings) Renamed `FastifyOpts` to `FastifyOptions`\n- (typings) Renamed duplicate `LatencyRef` interface in SequentialBucket to `MinimalLatencyRef`\n- (typings) Added CallbackFunction type for SequentialBucket\n### Added:\n- Fastify typings for `FastifyServer#createEndpoint`\n### Fixed:\n- Changed HTTP method in `SlashCommandAPI#updateCommand` from `PUT` to `PATCH`\n- `User#flags` now actually uses `UserFlags`\n- Renamed UserFlags class to the name \"UserFlags\"\n\n## [1.0.0] - 2020-12-16\n### Removed:\n- **[BREAKING]** `Context.initialResponseDeleted`\n- **[BREAKING]** `treq` parameter from `SlashCreator#ping` event -  The event no longer emits any parameters\n### Changed:\n- **[BREAKING]** `treq` parameter in `SlashCreator#unknownInteraction` event is now `interaction`\n### Added:\n- More documentation\n- `Context.edit(messageID, content, options)`\n- `Context.editOriginal(messageID, content, options)`\n- `Context.expired` and internal handlers using this\n- `Context.sendFollowUp(content, options)`\n- `Message` and `User` class\n- `GatewayServer` - Support for gateway events\n- `SlashCreatorAPI.interactionCallback(id, token, body)`\n- `Server.isWebserver`\n- `Server.handleInteraction()`\n### Fixed:\n- Default error messages\n- Exports for Constants and CommandOptionType\n\n## [0.2.0] - 2020-12-16\n### Removed:\n- **[BREAKING]** `Context.acknowledge` now returns a promise\n- **[BREAKING]** Removed `returnPromise` from syncCommands\n### Added:\n- Errors will be thrown if a Server without its installed package is instantiated\n### Fixed:\n- RespondFunction is now a promise\n- `Context.send` erroring\n- Added/Updated debug emit lines\n- ExpressServer for TypeScript\n\n## [0.1.0] - 2020-12-15\n- Initial release.\n\n[Unreleased]: https://github.com/Snazzah/slash-create/compare/v3.4.0...HEAD\n[0.1.0]: https://github.com/Snazzah/slash-create/releases/tag/v0.1.0\n[0.2.0]: https://github.com/Snazzah/slash-create/compare/v0.1.0...v0.2.0\n[1.0.0]: https://github.com/Snazzah/slash-create/compare/v0.2.0...v1.0.0\n[1.1.0]: https://github.com/Snazzah/slash-create/compare/v1.0.0...v1.1.0\n[1.1.1]: https://github.com/Snazzah/slash-create/compare/v1.0.0...v1.1.1\n[1.1.2]: https://github.com/Snazzah/slash-create/compare/v1.1.1...v1.1.2\n[1.1.3]: https://github.com/Snazzah/slash-create/compare/v1.1.2...v1.1.3\n[1.1.4]: https://github.com/Snazzah/slash-create/compare/v1.1.3...v1.1.4\n[1.1.5]: https://github.com/Snazzah/slash-create/compare/v1.1.4...v1.1.5\n[1.1.6]: https://github.com/Snazzah/slash-create/compare/v1.1.5...v1.1.6\n[1.2.0]: https://github.com/Snazzah/slash-create/compare/v1.1.6...v1.2.0\n[1.3.0]: https://github.com/Snazzah/slash-create/compare/v1.2.0...v1.3.0\n[2.0.0]: https://github.com/Snazzah/slash-create/compare/v1.3.0...v2.0.0\n[2.1.0]: https://github.com/Snazzah/slash-create/compare/v2.0.0...v2.1.0\n[2.1.1]: https://github.com/Snazzah/slash-create/compare/v2.1.0...v2.1.1\n[2.1.2]: https://github.com/Snazzah/slash-create/compare/v2.1.1...v2.1.2\n[3.0.0]: https://github.com/Snazzah/slash-create/compare/v2.1.2...v3.0.0\n[3.0.1]: https://github.com/Snazzah/slash-create/compare/v3.0.0...v3.0.1\n[3.1.0]: https://github.com/Snazzah/slash-create/compare/v3.0.1...v3.1.0\n[3.2.0]: https://github.com/Snazzah/slash-create/compare/v3.1.0...v3.2.0\n[3.2.1]: https://github.com/Snazzah/slash-create/compare/v3.2.0...v3.2.1\n[3.2.2]: https://github.com/Snazzah/slash-create/compare/v3.2.1...v3.2.2\n[3.2.3]: https://github.com/Snazzah/slash-create/compare/v3.2.2...v3.2.3\n[3.3.0]: https://github.com/Snazzah/slash-create/compare/v3.2.3...v3.3.0\n[3.4.0]: https://github.com/Snazzah/slash-create/compare/v3.3.0...v3.4.0\n","path":"CHANGELOG.md"},"context-options":{"name":"CommandContext.options","type":"md","content":"When getting options from a context, it's important to know the format of the options. This is dependent on the options that you defined in the command.\n\n### Normal commands\nFor commands without any subcommands, each option should be mapped to a key with it's respective value.\n\n```js\noptions: [{\n  type: CommandOptionType.STRING,\n  name: 'food',\n  description: 'What food do you like?'\n}, {\n  type: CommandOptionType.STRING,\n  name: 'drink',\n  description: 'What drink do you want?'\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    food: 'cheeseburger',\n    drink: 'fanta'\n  }\n*/\n```\n\n### Nested commands\nFor commands with subcommands or subcommand groups, options go down the line of the subcommand it came from.\n\n```js\noptions: [{\n  type: CommandOptionType.SUB_COMMAND,\n  name: 'order',\n  description: 'Order some food.'\n  options: [{\n    type: CommandOptionType.STRING,\n    name: 'food',\n    description: 'What food do you want?'\n  }, {\n    type: CommandOptionType.STRING,\n    name: 'drink',\n    description: 'What drink do you want?'\n  }]\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    order: {\n      food: 'cheeseburger',\n      drink: 'fanta'\n    }\n  }\n*/\n```\n\n### Nested commands with no options\nIf any nested command have optional options and the user provides nothing, an empty object will be in place.\n\n```js\noptions: [{\n  type: CommandOptionType.SUB_COMMAND,\n  name: 'order',\n  description: 'Order some food.'\n  options: [{\n    type: CommandOptionType.STRING,\n    name: 'food',\n    description: 'What food do you want?'\n  }, {\n    type: CommandOptionType.STRING,\n    name: 'drink',\n    description: 'What drink do you want?'\n  }]\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    order: {}\n  }\n*/\n```\n","path":"docs/general/context-options.md"},"unknown-command":{"name":"Unknown commands","type":"md","content":"Unknown commands are commands that fill in for commands that could not be found loaded in the creator. They are not stored normally like regular commands. This can be helpful if a guild has not yet cached the newest version of the global commands or you do not wish to sync commands in order to not lose configuration.\n\nTo make a command handled by unknown commands, you can set `unknown` to `true` in the command options.\n\nImportant notes about unknown commands:\n- The `name`, `description`, `guildID`, `requiredPermissions` and `options` are not considered, since this can be called from any command.\n- They do not use the `hasPermission` and the `onBlock` function, however the `onError` function is still used.\n","path":"docs/general/unknown-command.md"}}},"examples":{"name":"Examples","files":{"basic":{"name":"Basic Example","type":"js","content":"const { SlashCreator } = require('slash-create');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n    // Registers all of your commands in the ./commands/ directory\n    .registerCommandsIn(path.join(__dirname, 'commands'))\n    // This will sync commands to Discord, it must be called after commands are loaded.\n    // This also returns itself for more chaining capabilities.\n    .syncCommands();\n","path":"docs/examples/basic.js"},"webserver":{"name":"Using a Webserver","type":"md","content":"## Creating a Server\n```js\nconst { ExpressServer } = require('slash-create');\n\ncreator\n    .withServer(new ExpressServer())\n    // Depending on what server is used, this may not be needed.\n    .startServer();\n\n/**\n * By default, this serves to `127.0.0.1:80/interactions`.\n * You can change the `serverPort` and `endpointPath` to affect where to serve to.\n */\n\n/**\n * You can also initialize the server with an existing application.\n * If you are doing this with express applications, the express application must already have `express.json()` as middleware.\n */\n\ncreator\n    // Set `alreadyListening` if the server has already started.\n    .withServer(new ExpressServer(app, { alreadyListening: true }));\n```\n\n## Debugging locally\n\nA way expose a localhost port to a URL is by using [ngrok](https://ngrok.com/). ([download](https://ngrok.com/download))\n\nFirst, download and install ngrok, then type `ngrok http 80` in a new terminal. This will create a https://*.ngrok.io URL.\n\nTo instruct discord to use your server for all user-created interactions, you must:\n- Go to to [Discord Developers Portal Applications Page](https://discord.com/developers/applications). \n- Select / Create a new application. On the application's page, fill the \"Interactions endpoint URL\" input with the https://*.ngrok.io/interactions url.\n- Invite your application to your server using this URL: `https://discord.com/oauth2/authorize?client_id=[client-id]&scope=applications.commands`\n- You're ready to go!\n\nBe aware that the ngrok URL expires after 2 hours, you'll have to restart the ngrok command after this delay.\n","path":"docs/examples/webserver.md"},"discord-bot":{"name":"Using a Discord Bot","type":"md","content":"### With [discord.js](https://github.com/discordjs/discord.js)\n```js\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.ws.on('INTERACTION_CREATE', handler)\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  .syncCommands();\n\nclient.login('BOT_TOKEN_HERE');\n```\n### With [eris](https://github.com/abalabahaha/eris)\n```js\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst Eris = require('eris');\nconst client = new Eris('BOT_TOKEN_HERE');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.on('rawWS', (event) => {\n        if (event.t === 'INTERACTION_CREATE') handler(event.d);\n      })\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  .syncCommands();\n\nclient.connect();\n```\n","path":"docs/examples/discord-bot.md"},"command":{"name":"Example Commands","type":"md","content":"### Basic Command\n```js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      description: 'Says hello to you.',\n      options: [{\n        type: CommandOptionType.STRING,\n        name: 'food',\n        description: 'What food do you like?'\n      }]\n    });\n\n    // Not required initially, but required for reloading with a fresh file.\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    return ctx.options.food ? `You like ${ctx.options.food}? Nice!` : `Hello, ${ctx.user.username}!`;\n  }\n}\n```\n\n### Command with Permissions\n```js\nconst { SlashCommand, CommandOptionType, ApplicationCommandPermissionType } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'exclusivity',\n      description: 'Only Snazzah can use this command.',\n      // Whether to enable this command for everyone by default\n      defaultPermission: false,\n      // Permissions are mapped by guild ID like this\n      permissions: {\n        '<guild_id>': [\n          {\n            type: ApplicationCommandPermissionType.USER,\n            id: '158049329150427136',\n            permission: true\n          }\n        ]\n      }\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    return 'Hi Snazzah!';\n  }\n}\n```\n","path":"docs/examples/command.md"},"components":{"name":"Message Components","type":"md","content":"View the [documentation for Component Contexts](https://slash-create.js.org/#/docs/main/$$$ref/class/ComponentContext) to know what to use.\n\n### Basic Event Usage\n```js\nconst { SlashCreator } = require('slash-create');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\n// ...\n\ncreator.on('componentInteraction', async ctx => {\n  /**\n   * This context object is similar to command context as it will\n   * still automatically acknowledge the interaction.\n   *\n   * You can still use `ctx.send` and `ctx.defer` however, there are\n   * new functions like `ctx.acknowledge` and `ctx.editParent`.\n   */\n\n  if (ctx.customID === 'example_button') {\n    await ctx.editParent('You clicked a button! This will overwrite the original message!');\n    await ctx.send('You clicked a button! This will reply to the original message!');\n  }\n\n  // Note: You MUST use `ctx.send` and must not return regular send options.\n})\n```\n\n### Usage in commands\n```js\nconst { SlashCommand, ComponentType, ButtonStyle } = require('slash-create');\n\nmodule.exports = class ButtonCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'button',\n      description: 'Show some buttons.'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    await ctx.defer();\n    await ctx.send('here is some buttons', {\n      components: [{\n        type: ComponentType.ACTION_ROW,\n        components: [{\n          type: ComponentType.BUTTON,\n          style: ButtonStyle.PRIMARY,\n          label: 'button',\n          custom_id: 'example_button',\n          emoji: {\n            name: '👌'\n          }\n        }]\n      }]\n    });\n\n    /**\n     * This function handles component contexts within a command, so you\n     * can use the previous context aswell.\n     */\n    ctx.registerComponent('example_button', async (btnCtx) => {\n      await btnCtx.editParent('You clicked the button!');\n    });\n  }\n}\n```\n\n### Select Component Example\nNote: Only one Select component is allowed per action row. ([See Documentation](https://discord.com/developers/docs/interactions/message-components#select-menus))\n```js\nconst { SlashCommand, ComponentType } = require('slash-create');\n\nmodule.exports = class ButtonCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'class',\n      description: 'Select a class!'\n    });\n\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    await ctx.defer();\n    await ctx.send('What class do you want?', {\n      components: [{\n        type: ComponentType.ACTION_ROW,\n        components: [{\n          type: ComponentType.SELECT,\n          custom_id: 'class_select',\n          placeholder: \"Choose a class\",\n          min_values: 1,\n          max_values: 3,\n          options: [\n              {\n                  label: \"Rogue\",\n                  value: \"rogue\",\n                  description: \"Sneak 'n stab\",\n                  emoji: {\n                      name: \"rogue\",\n                      id: \"625891304148303894\"\n                  }\n              },\n              {\n                  label: \"Mage\",\n                  value: \"mage\",\n                  description: \"Turn 'em into a sheep\",\n                  emoji: {\n                      \"name\": \"mage\",\n                      \"id\": \"625891304081063986\"\n                  }\n              },\n              {\n                  label: \"Priest\",\n                  value: \"priest\",\n                  description: \"You get heals when I'm done doing damage\",\n                  emoji: {\n                      \"name\": \"priest\",\n                      \"id\": \"625891303795982337\"\n                  }\n              }\n          ]\n        }]\n      }]\n    });\n\n    /**\n     * This function handles component contexts within a command, so you\n     * can use the previous context aswell.\n     */\n    ctx.registerComponent('class_select', async (selectCtx) => {\n      await selectCtx.editParent('You selected the following classes: ' + selectCtx.values.join(', '));\n    });\n  }\n}\n```\n","path":"docs/examples/components.md"},"gcf":{"name":"Google Cloud Functions","type":"md","content":"Before using the server, check out [how to use the functions module](https://www.npmjs.com/package/@google-cloud/functions-framework).\n\n```js\nconst { GCFServer } = require('slash-create');\n\ncreator\n  // The first argument is required, but rhe second argument is the \"target\" or the name of the export.\n  // By default, the target is \"interactions\".\n  .withServer(new GCFServer(module.exports))\n  .registerCommandsIn(path.join(__dirname, 'commands'));\n```\n\nIf you want more examples of using Google services, check out [jasondamour/discord-gcloud-commands](https://github.com/jasondamour/discord-gcloud-commands).\n","path":"docs/examples/gcf.md"},"lambda":{"name":"AWS Lambda","type":"md","content":"### Minimal Setup Example\n\n1. Login to the [AWS Management Console](https://console.aws.amazon.com/).\n2. Navigate to *Services* &rarr; *Lambda* &rarr; *Create function*\n3. Set a function name, leave Node.js as runtime, click *Create function*\n4. Create a local Node.js project on your computer, install this library. Create a source file (e.g. `index.js`) and use the following example code:\n\n```js\nconst path = require('path');\nconst { AWSLambdaServer, SlashCreator } = require('slash-create');\n\nconst creator = new SlashCreator({\n    applicationID: process.env.DISCORD_APP_ID,\n    publicKey: process.env.DISCORD_PUBLIC_KEY,\n    token: process.env.DISCORD_BOT_TOKEN\n});\n\ncreator\n    // The first argument is required, the second argument is the name or \"target\" of the export.\n    // It defaults to 'interactions', so it would not be strictly necessary here.\n    .withServer(new AWSLambdaServer(module.exports, 'interactions'))\n    .registerCommandsIn(path.join(__dirname, 'commands'))\n    .syncCommands();\n```\n\n5. Make sure to create some example commands in the *commands* directory.\n6. Zip the whole project and upload it by selecting *Upload from* &rarr; *.zip file* in the AWS Lambda console. Your zipped folder structure should look like this (note that there is no root folder):\n\n```\nupload.zip\n├── node_modules\n│   └── ...\n├── commands\n│   └── exampleCommand.js\n├── index.js\n└── package.json (optional)\n```\n\n7. *Deploy* your code, if needed.\n8. *Edit* the runtime settings, set your handler (e.g. `index.interactions`)\n9. If necessary (like in the example code above), add your Discord credentials under *Configuration* &rarr; *Environment variables*\n10. Navigate to *Services* &rarr; *API Gateway* &rarr; *Create API* &rarr; *HTTP API* &rarr; *Build*\n11. Add a new \"Lambda\" integration, choose your previously created function\n12. Make sure to select **Payload Format Version 2.0** and assign an arbitrary API name\n13. After selecting *Next*, add a new route for Discord's outgoing webhook (Method: `POST`, Resource path: `/event`) and select your Lambda function as integration target\n14. Leave the rest as-is and create the API\n15. Note down your custom *Invoke URL* and add your resource path to it (format: `https://abcdef1234.execute-api.us-east-2.amazonaws.com/event`)\n16. Save it as Interactions Endpoint URL in the Discord Developer Portal\n17. Everything should work fine!\n\n### Additional notes\n- Please note that **syncing your commands in the Lambda handler is not recommended** because AWS will destroy and recreate your execution environment as needed, which could lead to a lot of unnecessary requests to the Discord API.\n  - A more efficient approach would be to create a separate function for syncing the commands and removing `syncCommands()` from the handler.\n","path":"docs/examples/lambda.md"},"azure":{"name":"Azure Functions","type":"md","content":"\n## Creating the Function\n\n - Create a new empty directory, and open it with VS Code\n - Install the [Azure Functions](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions) VS Code extension\n - Press <kbd>CTRL</kbd> + <kbd>SHIFT</kbd> + <kbd>P</kbd> to open the command prompt\n - Select **Azure Functions: Create new Project**\n - Select the current directory\n - Select either **TypeScript** or **JavaScript** when prompted for a language\n - Select **HTTP trigger** when prompted for a template\n - Type any function name you want\n - Select **Anonymous** when prompted for the \"Authorization Level\"\n - A new function should be created!\n\n Be aware that you can also do all these steps in the Azure Portal. \n\n## Building and deploying the Function\n\n\n### Building the Function \n\nNow that you created a Function, your folder structure should look like this: \n\n```\n├── [Function name]\n│   ├── function.json\n│   ├── sample.dat\n│   └── index.js\n├── host.json\n├── local-settings.json\n├── proxies.json\n└── package.json\n```\n\nOpen `index.js` and replace its content by this:\n\n```js\nconst { AzureFunctionServer, SlashCreator } = require('slash-create');\n\nconst creator = new SlashCreator({\n    applicationID: process.env.DISCORD_APP_ID,\n    publicKey: process.env.DISCORD_PUBLIC_KEY,\n    token: process.env.DISCORD_BOT_TOKEN\n});\n\ncreator\n  // The first argument is required, but rhe second argument is the \"target\" or the name of the export.\n  // By default, the target is \"interactions\".\n  .withServer(new AzureFunctionServer(module.exports))\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  // Syncing the commands each time the function is executed is wasting computing time\n  .syncCommands();\n\n```\n\nNext, open `function.json` and replace the `bindings` property to the following. Scroll down to the Details section for more info on how it works.\n\n```json\n  \"bindings\": [\n    {\n      \"authLevel\": \"anonymous\",\n      \"type\": \"httpTrigger\",\n      \"direction\": \"in\",\n      \"name\": \"req\",\n      \"methods\": [\n        \"post\"\n      ]\n    },\n    {\n      \"type\": \"http\",\n      \"direction\": \"out\",\n      \"name\": \"res\"\n    }\n  ],\n```\n\n**Don't forget to create a \"commands\" directory in the \"[Function name] directory with some sample commands.**\n\nThe last thing is to deploy the function.\n\n### Deploying the Function \n - Press <kbd>CTRL</kbd> + <kbd>SHIFT</kbd> + <kbd>P</kbd> to open the command prompt again\n - Search for **Azure Functions: Deploy to Function App...**\n - Follow the prompts, creating a new function app when prompted\n - Once deployed, open the command prompt and select \"Azure Functions: Retrieve Function URL\"\n - Follow the prompts and you should have the function's invocation URL in the clipboard. This URL should follow this pattern:   \n \n    https://[function-app-name].azurewebsites.net/api/[function-name]\n\nYou can also retrieve this URL in the Azure Portal.\n\n## Discord configuration\n\n- Go to to [Discord Developers Portal Applications Page](https://discord.com/developers/applications). \n- Select / Create a new application. On the application's page, fill the \"Interactions endpoint URL\" input with the retrieved Function URL.  \n- Invite your application to your server using this URL: `https://discord.com/oauth2/authorize?client_id=[client-id]&scope=applications.commands`\n- You're ready to go!\n\n## Debugging locally \nWaiting for the function to deploy over and over again each time you are a experimenting with a new feature can be tedious. To circumvent this problem, it is possible to create a local server. \n\n1. Install [azure-cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli), and the [Azure Functions runtime](https://docs.microsoft.com/en-us/azure/azure-functions/functions-run-local) **Version 3.x**.\n2. Start the function locally by running `func start` or `npm run start` in the [Function name] directory.\n\nBy default, the function will start on port 7071. The **local** function invocation URL should be:\n\n    https://localhost:7071/api/[function-name]\n\nHowever, you need a public URL to use in interactions. An easy way to do this is with [ngrok](https://ngrok.com/). ([download](https://ngrok.com/download))\n- In another terminal, run `ngrok http 7071`. This will prompt you with a \"https://*.ngrok.io\" URL. You can now follow the **Discord configuration** part above, and fill the \"Interactions endpoint URL\" input with the ngrok URL.\n- **Note**: Be aware that the ngrok URL will expire after 2 hours. You will need to restart the ngrok command after this delay.\n\n## Details\n\nAzure Functions use something called [bindings](https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings?tabs=javascript). This is a fancy way of decoupling components. The bindings section above declares two bindings\n\n```jsonc\n  \"bindings\": [\n    {\n      // The first binding is an input binding ...\n      \"direction\": \"in\",\n      // That is an incoming HTTP POST request...\n      \"type\": \"httpTrigger\",\n      \"methods\": [\n        \"post\"\n      ],\n      // Without authorization...\n      \"authLevel\": \"anonymous\",\n      // Bound to the variable \"req\" in the function's context\n      \"name\": \"req\"\n\n    },\n    {\n      // The second binding is an output binding ...\n      \"direction\": \"out\",\n      // That is an outgoing HTTP request...\n      \"type\": \"http\",\n      // Bound to the variable \"res\" in the function's context\n      \"name\": \"res\"\n    }\n  ],\n```\n","path":"docs/examples/azure.md"}}}},"classes":[{"name":"SlashCreatorAPI","description":"The API handler for {@link SlashCreator}.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]}],"returns":[[["SlashCreatorAPI"]]],"meta":{"line":15,"file":"api.ts","path":"src"}},"props":[{"name":"_creator","description":"The parent creator.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":15,"file":"api.ts","path":"src"}}],"methods":[{"name":"bulkUpdateCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]},{"name":"commands","type":[[["Array","<"],["PartialApplicationCommandPermissions",">"]]]}],"returns":[[["Promise","<"],["Array","<"],["GuildApplicationCommandPermissions",">>"]]],"meta":{"line":125,"file":"api.ts","path":"src"}},{"name":"createCommand","description":"Creates a command.","params":[{"name":"command","description":"The command to create.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the command is global.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":40,"file":"api.ts","path":"src"}},{"name":"deleteCommand","description":"Deletes a command.","params":[{"name":"commandID","description":"The command ID to delete.","type":[[["string"]]]},{"name":"guildID","description":"The guild ID to delete the command. If undefined, the global command is deleted.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":89,"file":"api.ts","path":"src"}},{"name":"getCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]},{"name":"commandID","type":[[["string"]]]}],"returns":[[["Promise","<"],["GuildApplicationCommandPermissions",">"]]],"meta":{"line":105,"file":"api.ts","path":"src"}},{"name":"getCommands","description":"Gets the commands from an applicaton.","params":[{"name":"guildID","description":"The guild ID to get commands from. If undefined, global commands are fetched.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["ApplicationCommand",">>"]]],"meta":{"line":26,"file":"api.ts","path":"src"}},{"name":"getGuildCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["GuildApplicationCommandPermissions",">>"]]],"meta":{"line":98,"file":"api.ts","path":"src"}},{"name":"interactionCallback","description":"Responds to an interaction.","params":[{"name":"interactionID","description":"The interaction's ID.","type":[[["string"]]]},{"name":"interactionToken","description":"The interaction's token.","type":[[["string"]]]},{"name":"body","description":"The body to send.","type":[[["any"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":143,"file":"api.ts","path":"src"}},{"name":"updateCommand","description":"Updates a command.","params":[{"name":"commandID","description":"The command ID to update.","type":[[["string"]]]},{"name":"command","description":"The payload to update the command to.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":57,"file":"api.ts","path":"src"}},{"name":"updateCommandPermissions","params":[{"name":"guildID","type":[[["string"]]]},{"name":"commandID","type":[[["string"]]]},{"name":"permissions","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]}],"returns":[[["Promise","<"],["GuildApplicationCommandPermissions",">"]]],"meta":{"line":112,"file":"api.ts","path":"src"}},{"name":"updateCommands","description":"Updates multiple commands.","params":[{"name":"commands","description":"The payload to update the commands to.","type":[[["Array","<"],["BulkUpdateCommand",">"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["ApplicationCommand",">>"]]],"meta":{"line":73,"file":"api.ts","path":"src"}}],"meta":{"line":13,"file":"api.ts","path":"src"}},{"name":"SlashCommand","description":"Represents a Discord slash command.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"opts","description":"The options for the command.","type":[[["SlashCommandOptions"]]]}],"returns":[[["SlashCommand"]]],"meta":{"line":106,"file":"command.ts","path":"src"}},"props":[{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID.","access":"private","default":"new Map<string, ThrottleObject>()","type":[[["Map","<"],["string",", "],["ThrottleObject",">"]]],"meta":{"line":106,"file":"command.ts","path":"src"}},{"name":"commandName","description":"The command's name.","readonly":true,"type":[[["string"]]],"meta":{"line":71,"file":"command.ts","path":"src"}},{"name":"creator","description":"The creator responsible for this command.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":103,"file":"command.ts","path":"src"}},{"name":"defaultPermission","description":"Whether to enable this command for everyone by default.","readonly":true,"type":[[["boolean"]]],"meta":{"line":87,"file":"command.ts","path":"src"}},{"name":"deferEphemeral","description":"Whether responses from this command should defer ephemeral messages.","readonly":true,"type":[[["boolean"]]],"meta":{"line":85,"file":"command.ts","path":"src"}},{"name":"description","description":"The command's description.","readonly":true,"type":[[["string"]]],"meta":{"line":73,"file":"command.ts","path":"src"}},{"name":"filePath","description":"The file path of the command.\nUsed for refreshing the require cache.\nSet this to `__filename` in the constructor to enable cache clearing.","type":[[["undefined"," | "],["string"]]],"meta":{"line":95,"file":"command.ts","path":"src"}},{"name":"guildIDs","description":"The guild ID(s) for the command.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"command.ts","path":"src"}},{"name":"ids","description":"A map of command IDs with its guild ID (or 'global' for global commands), used for syncing command permissions.\nThis will populate when syncing or collecting with {@link SlashCreator#collectCommandIDs}.","default":"new Map<string, string>()","type":[[["Map","<"],["string",", "],["string",">"]]],"meta":{"line":100,"file":"command.ts","path":"src"}},{"name":"options","description":"The options for the command.","readonly":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]],"meta":{"line":75,"file":"command.ts","path":"src"}},{"name":"permissions","description":"The command permissions per guild.","readonly":true,"type":[[["CommandPermissions"]]],"meta":{"line":89,"file":"command.ts","path":"src"}},{"name":"requiredPermissions","description":"The permissions required to use this command.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":79,"file":"command.ts","path":"src"}},{"name":"throttling","description":"The throttling options for this command.","readonly":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":81,"file":"command.ts","path":"src"}},{"name":"unknown","description":"Whether this command is used for unknown commands.","readonly":true,"type":[[["boolean"]]],"meta":{"line":83,"file":"command.ts","path":"src"}},{"name":"commandJSON","description":"The JSON for using commands in Discord's API.","access":"private","readonly":true,"type":[[["PartialApplicationCommand"]]],"meta":{"line":134,"file":"command.ts","path":"src"}},{"name":"keyName","description":"The internal key name for the command.","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":147,"file":"command.ts","path":"src"}}],"methods":[{"name":"finalize","description":"Finalizes the return output","access":"private","params":[{"name":"response","description":"The response from the command","type":[[["any"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["any"]]],"meta":{"line":267,"file":"command.ts","path":"src"}},{"name":"hasPermission","description":"Checks whether the context member has permission to use the command.","params":[{"name":"ctx","description":"The triggering context","type":[[["CommandContext"]]]}],"returns":[[["boolean"," | "],["string"]]],"returnsDescription":"Whether the member has permission, or an error message to respond with if they don't\n","meta":{"line":157,"file":"command.ts","path":"src"}},{"name":"onBlock","description":"Called when the command is prevented from running.","params":[{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `permission`, `throttling`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds","optional":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":185,"file":"command.ts","path":"src"}},{"name":"onError","description":"Called when the command produces an error while running.","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]}],"returns":[[["any"]]],"meta":{"line":207,"file":"command.ts","path":"src"}},{"name":"onUnload","description":"Called when the command is being unloaded.","returns":[[["any"]]],"meta":{"line":215,"file":"command.ts","path":"src"}},{"name":"reload","description":"Reloads the command.","returns":[[["void"]]],"meta":{"line":241,"file":"command.ts","path":"src"}},{"name":"run","description":"Runs the command.","params":[{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":257,"file":"command.ts","path":"src"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary.","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":[[["ThrottleObject"," | "],["null"]]],"meta":{"line":222,"file":"command.ts","path":"src"}},{"name":"unload","description":"Unloads the command.","returns":[[["void"]]],"meta":{"line":248,"file":"command.ts","path":"src"}},{"name":"validateOptions","description":"Validates {@link SlashCommandOptions}.","scope":"static","access":"private","params":[{"name":"opts","type":[[["SlashCommandOptions"]]]}],"returns":[[["void"]]],"meta":{"line":278,"file":"command.ts","path":"src"}}],"meta":{"line":69,"file":"command.ts","path":"src"}},{"name":"SlashCreator","description":"The main class for using commands and interactions.","extends":["TypedEventEmitter"],"construct":{"name":"constructor","params":[{"name":"opts","description":"The options for the creator","type":[[["SlashCreatorOptions"]]]}],"returns":[[["SlashCreator"]]],"meta":{"line":148,"file":"creator.ts","path":"src"}},"props":[{"name":"allowedMentions","description":"The formatted allowed mentions from the options","readonly":true,"type":[[["FormattedAllowedMentions"]]],"meta":{"line":143,"file":"creator.ts","path":"src"}},{"name":"api","description":"The API handler for the creator","readonly":true,"default":"new SlashCreatorAPI(this)","type":[[["SlashCreatorAPI"]]],"meta":{"line":132,"file":"creator.ts","path":"src"}},{"name":"commands","description":"The commands loaded onto the creator","readonly":true,"default":"new Collection<string, SlashCommand>()","type":[[["Collection","<"],["string",", "],["SlashCommand",">"]]],"meta":{"line":134,"file":"creator.ts","path":"src"}},{"name":"commandsPath","description":"The path where the commands were loaded from","see":["#registerCommandsIn\n"],"type":[[["undefined"," | "],["string"]]],"meta":{"line":139,"file":"creator.ts","path":"src"}},{"name":"options","description":"The options from constructing the creator","type":[[["SlashCreatorOptions"]]],"meta":{"line":128,"file":"creator.ts","path":"src"}},{"name":"requestHandler","description":"The request handler for the creator","readonly":true,"type":[[["RequestHandler"]]],"meta":{"line":130,"file":"creator.ts","path":"src"}},{"name":"server","description":"The server being used in the creator","type":[[["Server"]]],"meta":{"line":141,"file":"creator.ts","path":"src"}},{"name":"unknownCommand","description":"The command to run when an unknown command is used.","type":[[["SlashCommand"]]],"meta":{"line":145,"file":"creator.ts","path":"src"}}],"methods":[{"name":"_createGatewayRespond","access":"private","params":[{"name":"interactionID","type":[[["string"]]]},{"name":"token","type":[[["string"]]]}],"returns":[[["RespondFunction"]]],"meta":{"line":799,"file":"creator.ts","path":"src"}},{"name":"_getCommandFromInteraction","access":"private","params":[{"name":"interaction","type":[[["InteractionRequestData"]]]}],"returns":[[["undefined"," | "],["SlashCommand"]]],"meta":{"line":609,"file":"creator.ts","path":"src"}},{"name":"_onInteraction","access":"private","params":[{"name":"interaction","type":[[["AnyRequestData"]]]},{"name":"respond","type":[[["RespondFunction"," | "],["null"]]]},{"name":"webserverMode","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":656,"file":"creator.ts","path":"src"}},{"name":"_onRequest","access":"private","params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":622,"file":"creator.ts","path":"src"}},{"name":"_runCommand","access":"private","params":[{"name":"command","type":[[["SlashCommand"]]]},{"name":"ctx","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":777,"file":"creator.ts","path":"src"}},{"name":"cleanRegisteredComponents","description":"Cleans any awaiting component callbacks from command contexts.","returns":[[["void"]]],"meta":{"line":602,"file":"creator.ts","path":"src"}},{"name":"collectCommandIDs","description":"Updates the command IDs internally in the creator.\nUse this if you make any changes to commands in the API.","params":[{"name":"skipGuildErrors","description":"Whether to prevent throwing an error if the API failed to get guild commands","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":557,"file":"creator.ts","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["SlashCreator#registerCommands\n"],"examples":[],"emits":[],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":193,"file":"creator.ts","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["any",">"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":231,"file":"creator.ts","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","see":[],"examples":["\nconst path = require('path');\ncreator.registerCommandsIn(path.join(__dirname, 'commands'));\n"],"emits":[],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["RequireAllOptions"," | "],["string"]]]}],"returns":[[["this"]]],"meta":{"line":255,"file":"creator.ts","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command. (does not support changing name, or guild IDs)","params":[{"name":"command","description":"New command","type":[[["any"]]]},{"name":"oldCommand","description":"Old command","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":275,"file":"creator.ts","path":"src"}},{"name":"startServer","description":"Starts the server, if one was defined.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":326,"file":"creator.ts","path":"src"}},{"name":"syncCommandPermissions","description":"Sync command permissions.\n<warn>This requires you to have your token set in the creator config AND have commands already synced previously.</warn>","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":532,"file":"creator.ts","path":"src"}},{"name":"syncCommands","description":"Sync all commands with Discord. This ensures that commands exist when handling them.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"opts","optional":true,"type":[[["SyncCommandOptions"]]]}],"returns":[[["this"]]],"meta":{"line":337,"file":"creator.ts","path":"src"}},{"name":"syncCommandsIn","description":"Sync guild commands.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"guildID","description":"The guild to sync","type":[[["string"]]]},{"name":"deleteCommands","description":"Whether to delete command not found in the creator","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":396,"file":"creator.ts","path":"src"}},{"name":"syncGlobalCommands","description":"Sync global commands.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"deleteCommands","description":"Whether to delete command not found in the creator","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":470,"file":"creator.ts","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command.","params":[{"name":"command","description":"Command to unregister","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":301,"file":"creator.ts","path":"src"}},{"name":"withServer","description":"Attaches a server to the creator.","params":[{"name":"server","description":"The server to use","type":[[["Server"]]]}],"returns":[[["this"]]],"meta":{"line":313,"file":"creator.ts","path":"src"}}],"events":[{"name":"commandBlock","description":"Emitted when a command is blocked.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was blocked","type":[[["SlashCommand"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":725,"file":"constants.ts","path":"src"}},{"name":"commandError","description":"Emitted when a command gave an error.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that gave an error","type":[[["SlashCommand"]]]},{"name":"err","description":"The error given","type":[[["Error"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":734,"file":"constants.ts","path":"src"}},{"name":"commandInteraction","description":"Emitted when a command interaction is given.\nOnly emits if `handleCommandsManually` in {@link SlashCreatorOptions} is true.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The interaction","type":[[["InteractionRequestData"]]]},{"name":"respond","description":"The response callback to the interaction","type":[[["RespondFunction"]]]},{"name":"webserverMode","description":"Whether this is from a webserver","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":681,"file":"constants.ts","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was registered","type":[[["SlashCommand"]]]},{"name":"creator","description":"Creator that the command was registered to","type":[[["SlashCreator"]]]}],"returns":[[["void"]]],"meta":{"line":700,"file":"constants.ts","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","see":[],"examples":[],"emits":[],"params":[{"name":"command","type":[[["SlashCommand"]]]},{"name":"oldCommand","description":"Old command","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":715,"file":"constants.ts","path":"src"}},{"name":"commandRun","description":"Emitted when a command is ran.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was ran","type":[[["SlashCommand"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise","<"],["any",">"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":743,"file":"constants.ts","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was unregistered","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":707,"file":"constants.ts","path":"src"}},{"name":"componentInteraction","description":"Emitted when a component interaction is given.","see":[],"examples":[],"emits":[],"params":[{"name":"ctx","description":"The component context","type":[[["ComponentContext"]]]}],"returns":[[["void"]]],"meta":{"line":692,"file":"constants.ts","path":"src"}},{"name":"debug","description":"Emitted when a debug message is given.","see":[],"examples":[],"emits":[],"params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":643,"file":"constants.ts","path":"src"}},{"name":"error","description":"Emitted when an error occurred","see":[],"examples":[],"emits":[],"params":[{"name":"err","description":"The error thrown","type":[[["Error"]]]}],"returns":[[["void"]]],"meta":{"line":650,"file":"constants.ts","path":"src"}},{"name":"ping","description":"Emitted when Discord pings the interaction endpoint.","see":[],"examples":[],"emits":[],"params":[{"name":"user","description":"The user that requested the ping","optional":true,"type":[[["CommandUser"]]]}],"returns":[[["void"]]],"meta":{"line":616,"file":"constants.ts","path":"src"}},{"name":"rawInteraction","description":"Emitted when any interaction is given.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The interaction","type":[[["AnyRequestData"]]]}],"returns":[[["void"]]],"meta":{"line":671,"file":"constants.ts","path":"src"}},{"name":"rawREST","description":"Emitted when the Client's RequestHandler receives a response.","see":[],"examples":[],"emits":[],"params":[{"name":"request","description":"The data for the request","type":[[["RawRequest"]]]}],"returns":[[["void"]]],"meta":{"line":629,"file":"constants.ts","path":"src"}},{"name":"synced","description":"Emitted when the creator successfully synced commands.","see":[],"examples":[],"emits":[],"returns":[[["void"]]],"meta":{"line":622,"file":"constants.ts","path":"src"}},{"name":"unknownInteraction","description":"Emitted when an unknown interaction type is encountered.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The unhandled interaction","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":664,"file":"constants.ts","path":"src"}},{"name":"unverifiedRequest","description":"Emitted when a request failed to be verified.","see":[],"examples":[],"emits":[],"params":[{"name":"treq","description":"The unverified request","type":[[["TransformedRequest"]]]}],"returns":[[["void"]]],"meta":{"line":657,"file":"constants.ts","path":"src"}},{"name":"warn","description":"Emitted when a warning is given.","see":[],"examples":[],"emits":[],"params":[{"name":"warning","description":"The warning","type":[[["Error"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":636,"file":"constants.ts","path":"src"}}],"meta":{"line":126,"file":"creator.ts","path":"src"}},{"name":"DiscordHTTPError","description":"An HTTP error from a request.","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","description":"A client request","type":[[["ClientRequest"]]]},{"name":"res","description":"An incoming message from the server","type":[[["IncomingMessage"]]]},{"name":"response","description":"Any {@link Server}s response class","type":[[["any"]]]},{"name":"stack","description":"The error stack","type":[[["string"]]]}],"returns":[[["DiscordHTTPError"]]],"meta":{"line":16,"file":"DiscordHTTPError.ts","path":"src/errors"}},"props":[{"name":"code","description":"The status code from the response.","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"message","description":"The response message.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"req","description":"The client request of the error.","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":6,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"res","description":"The response from the server.","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":8,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"response","description":"The response class from a {@link Server}.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"stack","description":"The error stack.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":45,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","access":"private","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","optional":true,"default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":49,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"meta":{"line":4,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"DiscordRESTError","description":"An Discord error from a request.","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","description":"A client request","type":[[["ClientRequest"]]]},{"name":"res","description":"An incoming message from the server","type":[[["IncomingMessage"]]]},{"name":"response","description":"Any {@link Server}s response class","type":[[["any"]]]},{"name":"stack","description":"The error stack","type":[[["string"]]]}],"returns":[[["DiscordRESTError"]]],"meta":{"line":16,"file":"DiscordRESTError.ts","path":"src/errors"}},"props":[{"name":"code","description":"The error code from the response.","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"message","description":"The message of the error.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"req","description":"The client request of the error.","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":6,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"res","description":"The response from the server.","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":8,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"response","description":"The response class from a {@link Server}.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"stack","description":"The error stack.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":48,"file":"DiscordRESTError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","access":"private","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","optional":true,"default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":52,"file":"DiscordRESTError.ts","path":"src/errors"}}],"meta":{"line":4,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Server","description":"The base Server for {@link SlashCreator}.","access":"private","construct":{"name":"constructor","params":[{"name":"opts","description":"The server options","optional":true,"default":"{ alreadyListening: false }","type":[[["ServerOptions"]]]},{"name":"isWebserver","description":"Whether this server is a webserver","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Server"]]],"meta":{"line":62,"file":"server.ts","path":"src"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"server.ts","path":"src"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":58,"file":"server.ts","path":"src"}},{"name":"AzureFunctionServer","description":"A server for Azure Function integration","see":["https://docs.microsoft.com/en-us/azure/azure-functions/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","type":[[["any"]]]},{"name":"target","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["AzureFunctionServer"]]],"meta":{"line":10,"file":"azure.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["RequestHandler"]]],"meta":{"line":10,"file":"azure.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"context","type":[[["Context"]]]},{"name":"req","type":[[["HttpRequest"]]]}],"returns":[[["void"]]],"meta":{"line":17,"file":"azure.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":43,"file":"azure.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":9,"file":"azure.ts","path":"src/servers"}},{"name":"ExpressServer","description":"A server for Express applications.","see":["http://expressjs.com\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The express application. Must have express.json installed as a middleware.","optional":true,"type":[[["any"]]]},{"name":"opts","description":"The server options","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["ExpressServer"]]],"meta":{"line":13,"file":"express.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"app","access":"private","readonly":true,"type":[[["any"]]],"meta":{"line":13,"file":"express.ts","path":"src/servers"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Express server.","params":[{"name":"middleware","description":"The middleware to add.","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":33,"file":"express.ts","path":"src/servers"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":55,"file":"express.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":74,"file":"express.ts","path":"src/servers"}},{"name":"set","description":"Sets an Express setting.","see":["http://expressjs.com/en/4x/api.html#app.settings.table\n"],"examples":[],"emits":[],"params":[{"name":"setting","description":"Express setting string","type":[[["string"]]]},{"name":"value","description":"The value to set the setting to","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":49,"file":"express.ts","path":"src/servers"}},{"name":"use","description":"Alias for {@link ExpressServer#addMiddleware}","params":[{"name":"middleware","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":39,"file":"express.ts","path":"src/servers"}}],"meta":{"line":12,"file":"express.ts","path":"src/servers"}},{"name":"FastifyServer","description":"A server for Fastify applications.","see":["https://fastify.io\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The fastify application, or the options for initialization","optional":true,"type":[[["any"]]]},{"name":"opts","description":"The server options","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["FastifyServer"]]],"meta":{"line":13,"file":"fastify.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"app","access":"private","readonly":true,"type":[[["any"]]],"meta":{"line":13,"file":"fastify.ts","path":"src/servers"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Fastify server.\n<warn>This requires you to have the 'middie' module registered to the server before using.</warn>","see":["https://www.fastify.io/docs/latest/Middleware/\n"],"examples":[],"emits":[],"params":[{"name":"middleware","description":"The middleware to add.","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":36,"file":"fastify.ts","path":"src/servers"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":52,"file":"fastify.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":71,"file":"fastify.ts","path":"src/servers"}},{"name":"use","description":"Alias for {@link FastifyServer#addMiddleware}","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":47,"file":"fastify.ts","path":"src/servers"}}],"meta":{"line":12,"file":"fastify.ts","path":"src/servers"}},{"name":"GatewayServer","description":"A \"server\" for gateway connections to pipe events into.","extends":["Server"],"construct":{"name":"constructor","params":[{"name":"eventHandler","description":"A function that is used to handle the event for gateway interactions.","type":[[["EventHandler"]]]}],"returns":[[["GatewayServer"]]],"meta":{"line":8,"file":"gateway.ts","path":"src/servers"}},"props":[{"name":"_eventHandler","access":"private","readonly":true,"type":[[["EventHandler"]]],"meta":{"line":8,"file":"gateway.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"server.ts","path":"src"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":17,"file":"gateway.ts","path":"src/servers"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":7,"file":"gateway.ts","path":"src/servers"}},{"name":"GCFServer","description":"A server for Google Cloud Functions.","see":["https://cloud.google.com/functions/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","description":"The exports for your module, must be `module.exports`","type":[[["any"]]]},{"name":"target","description":"The name of the exported function","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["GCFServer"]]],"meta":{"line":10,"file":"gcf.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["RequestHandler"]]],"meta":{"line":10,"file":"gcf.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"req","type":[[["Express","."],["Request"]]]},{"name":"res","type":[[["Express","."],["Response"]]]}],"returns":[[["any"]]],"meta":{"line":21,"file":"gcf.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":40,"file":"gcf.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":9,"file":"gcf.ts","path":"src/servers"}},{"name":"AWSLambdaServer","description":"A server for AWS Lambda proxy integrations","see":["https://aws.amazon.com/lambda/","https://aws.amazon.com/api-gateway/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","description":"The exports for your module, must be `module.exports`","type":[[["any"]]]},{"name":"target","description":"The name of the exported lambda handler (only HTTP APIs with payload version 2.0 are supported)","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["AWSLambdaServer"]]],"meta":{"line":12,"file":"lambda.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["RequestHandler"]]],"meta":{"line":12,"file":"lambda.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"event","type":[[["APIGatewayProxyEventV2"]]]},{"name":"_context","type":[[["Context"]]]},{"name":"callback","type":[[["APIGatewayProxyCallbackV2"]]]}],"returns":[[["void"]]],"meta":{"line":23,"file":"lambda.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":52,"file":"lambda.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":11,"file":"lambda.ts","path":"src/servers"}},{"name":"Channel","description":"Represents a resolved channel object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedChannel"]]]}],"returns":[[["Channel"]]],"meta":{"line":15,"file":"channel.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"channel.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":14,"file":"channel.ts","path":"src/structures"}},{"name":"id","description":"The channel's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"channel.ts","path":"src/structures"}},{"name":"name","description":"The channel's name","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"channel.ts","path":"src/structures"}},{"name":"type","description":"The channel's type","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"channel.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this channel.","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"channel.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":35,"file":"channel.ts","path":"src/structures"}}],"meta":{"line":6,"file":"channel.ts","path":"src/structures"}},{"name":"ComponentContext","description":"Represents an interaction context from a message component.","extends":["MessageInteractionContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data for the context.","type":[[["MessageComponentRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]}],"returns":[[["ComponentContext"]]],"meta":{"line":23,"file":"componentContext.ts","path":"src/structures/interfaces"}},"props":[{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":68,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"componentType","description":"The type of component this interaction came from.","readonly":true,"type":[[["ComponentType"]]],"meta":{"line":16,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":62,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"customID","description":"The ID of the component to identify its origin from.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"data","description":"The request data.","readonly":true,"type":[[["MessageComponentRequestData"]]],"meta":{"line":11,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":81,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":70,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":79,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":64,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":76,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":72,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"message","description":"The partial message this interaction came from.","readonly":true,"type":[[["PartialMessage"]]],"meta":{"line":20,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":83,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":74,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"values","description":"The the values of the interaction, if the component was a SELECT.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":18,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":105,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"acknowledge","description":"Acknowledges the interaction without replying.","returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the acknowledgement passed passed\n","meta":{"line":47,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":284,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":269,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":220,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":258,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editParent","description":"Edits the message that the component interaction came from.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":70,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":113,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":311,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":331,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":133,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":179,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":347,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"meta":{"line":9,"file":"componentContext.ts","path":"src/structures/interfaces"}},{"name":"CommandContext","description":"Context representing a command interaction.","extends":["MessageInteractionContext"],"construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data for the context.","type":[[["InteractionRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]},{"name":"webserverMode","description":"Whether the interaction was from a webserver.","type":[[["boolean"]]]},{"name":"deferEphemeral","description":"Whether the context should auto-defer ephemeral messages.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":37,"file":"context.ts","path":"src/structures/interfaces"}},"props":[{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":68,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":32,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"commandID","description":"The command's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":19,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"commandName","description":"The command's name.","readonly":true,"type":[[["string"]]],"meta":{"line":17,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":62,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"data","description":"The full interaction data.","readonly":true,"type":[[["InteractionRequestData"]]],"meta":{"line":14,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":81,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":70,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":79,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":64,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":76,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":72,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":28,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":83,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"options","description":"The options given to the command.","readonly":true,"type":[[["{}"]]],"meta":{"line":21,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":30,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"subcommands","description":"The subcommands the member used in order.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":23,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":74,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":26,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"webserverMode","description":"Whether the context is from a webserver.","access":"private","type":[[["boolean"]]],"meta":{"line":35,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":105,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":284,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":269,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":220,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":258,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":113,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":311,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":331,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":133,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":179,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":347,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"convertOptions","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["{}"]]],"meta":{"line":89,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"getSubcommandArray","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":100,"file":"context.ts","path":"src/structures/interfaces"}}],"meta":{"line":12,"file":"context.ts","path":"src/structures/interfaces"}},{"name":"MessageInteractionContext","description":"Represents a interaction context that handles messages.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data.","type":[[["any"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]}],"returns":[[["MessageInteractionContext"]]],"meta":{"line":85,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},"props":[{"name":"channelID","description":"The channel ID that the interaction was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":68,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"creator","description":"The creator of the interaction request.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":62,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":81,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"guildID","description":"The guild ID that the interaction was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":70,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":79,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":64,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"invokedAt","description":"The time when the interaction was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":76,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"member","description":"The member that invoked the interaction.","readonly":true,"type":[[["Member"]]],"meta":{"line":72,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"messageID","description":"The original message ID, automatically set when editing/fetching original message.","type":[[["undefined"," | "],["string"]]],"meta":{"line":83,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"user","description":"The user that invoked the interaction.","readonly":true,"type":[[["User"]]],"meta":{"line":74,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":105,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"methods":[{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":284,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":269,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":220,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"editOriginal","description":"Edits the original message.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":258,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"fetch","description":"Fetches a message.","params":[{"name":"messageID","description":"The ID of the message, defaults to the original message","optional":true,"default":"\"@original\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":113,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponent","description":"Registers a component callback from the initial message.\nThis unregisters automatically when the context expires.","params":[{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":311,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"registerComponentFrom","description":"Registers a component callback from a message.\nThis unregisters automatically when the context expires.","params":[{"name":"message_id","description":"The message ID of the component to register","type":[[["string"]]]},{"name":"custom_id","description":"The custom ID of the component to register","type":[[["string"]]]},{"name":"callback","description":"The callback to use on interaction","type":[[["ComponentRegisterCallback"]]]}],"returns":[[["void"]]],"meta":{"line":331,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":133,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":179,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"unregisterComponent","description":"Unregisters a component callback.","params":[{"name":"custom_id","description":"The custom ID of the component to unregister","type":[[["string"]]]},{"name":"message_id","description":"The message ID of the component to unregister, defaults to initial message ID if any","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["boolean"]]],"meta":{"line":347,"file":"messageInteraction.ts","path":"src/structures/interfaces"}}],"meta":{"line":60,"file":"messageInteraction.ts","path":"src/structures/interfaces"}},{"name":"Member","description":"Represents a Discord guild member.","extends":["ResolvedMember"],"construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["CommandMember"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["Member"]]],"meta":{"line":15,"file":"member.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"member.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":14,"file":"member.ts","path":"src/structures"}},{"name":"deaf","description":"Whether the user is deafened in voice channels","readonly":true,"type":[[["boolean"]]],"meta":{"line":12,"file":"member.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mute","description":"Whether the user is muted in voice channels","readonly":true,"type":[[["boolean"]]],"meta":{"line":10,"file":"member.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":10,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"pending","description":"Whether the member is pending verification","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":16,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":14,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","readonly":true,"type":[[["User"]]],"meta":{"line":20,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"displayName","description":"The display name for this member.","readonly":true,"type":[[["string"]]],"meta":{"line":54,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this member.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":29,"file":"member.ts","path":"src/structures"}}],"meta":{"line":8,"file":"member.ts","path":"src/structures"}},{"name":"Message","description":"Represents a Discord message.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the message","type":[[["MessageData"]]]},{"name":"creator","type":[[["SlashCreator"]]]},{"name":"ctx","description":"The instantiating context","optional":true,"type":[[["MessageInteractionContext"]]]}],"returns":[[["Message"]]],"meta":{"line":183,"file":"message.ts","path":"src/structures"}},"props":[{"name":"_ctx","description":"The context that created the message class","access":"private","readonly":true,"type":[[["MessageInteractionContext"]]],"meta":{"line":183,"file":"message.ts","path":"src/structures"}},{"name":"attachments","description":"The message's attachments","readonly":true,"type":[[["Array","<"],["MessageAttachment",">"]]],"meta":{"line":158,"file":"message.ts","path":"src/structures"}},{"name":"author","description":"The author of the message","readonly":true,"type":[[["User"]]],"meta":{"line":156,"file":"message.ts","path":"src/structures"}},{"name":"channelID","description":"The ID of the channel the message is in","readonly":true,"type":[[["string"]]],"meta":{"line":152,"file":"message.ts","path":"src/structures"}},{"name":"components","description":"The message's components","readonly":true,"type":[[["Array","<"],["AnyComponent",">"]]],"meta":{"line":154,"file":"message.ts","path":"src/structures"}},{"name":"content","description":"The content of the message","readonly":true,"type":[[["string"]]],"meta":{"line":150,"file":"message.ts","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp of when the message was last edited","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":172,"file":"message.ts","path":"src/structures"}},{"name":"embeds","description":"The message's embeds","readonly":true,"type":[[["Array","<"],["MessageEmbed",">"]]],"meta":{"line":160,"file":"message.ts","path":"src/structures"}},{"name":"flags","description":"The message's flags","readonly":true,"type":[[["number"]]],"meta":{"line":174,"file":"message.ts","path":"src/structures"}},{"name":"id","description":"The message's ID","readonly":true,"type":[[["string"]]],"meta":{"line":146,"file":"message.ts","path":"src/structures"}},{"name":"interaction","description":"The interaction this message is apart of","readonly":true,"type":[[["MessageInteraction"]]],"meta":{"line":180,"file":"message.ts","path":"src/structures"}},{"name":"mentionedEveryone","description":"Whether the message mentioned everyone/here","readonly":true,"type":[[["boolean"]]],"meta":{"line":166,"file":"message.ts","path":"src/structures"}},{"name":"mentions","description":"The message's user mentions","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":162,"file":"message.ts","path":"src/structures"}},{"name":"messageReference","description":"The message that this message is referencing","readonly":true,"type":[[["MessageReference"]]],"meta":{"line":176,"file":"message.ts","path":"src/structures"}},{"name":"roleMentions","description":"The message's role mentions","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":164,"file":"message.ts","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of the message","readonly":true,"type":[[["number"]]],"meta":{"line":170,"file":"message.ts","path":"src/structures"}},{"name":"tts","description":"Whether the message used TTS","readonly":true,"type":[[["boolean"]]],"meta":{"line":168,"file":"message.ts","path":"src/structures"}},{"name":"type","description":"The message type","readonly":true,"type":[[["number"]]],"meta":{"line":148,"file":"message.ts","path":"src/structures"}},{"name":"webhookID","description":"The message's webhook ID","readonly":true,"type":[[["string"]]],"meta":{"line":178,"file":"message.ts","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this message.","returns":[[["Promise","<"],["any",">"]]],"meta":{"line":234,"file":"message.ts","path":"src/structures"}},{"name":"edit","description":"Edits this message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":228,"file":"message.ts","path":"src/structures"}}],"meta":{"line":144,"file":"message.ts","path":"src/structures"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield.\nAll {@link Member}s have a set of permissions.","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"Permission flags. Check the source of this property for available permissions.","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":45,"file":"permissions.ts","path":"src/structures"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":18,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":56,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":66,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":106,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":43,"file":"permissions.ts","path":"src/structures"}},{"name":"ResolvedMember","description":"Represents a resolved member object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedMemberData"]]]},{"name":"userData","description":"The data for the member's user","type":[[["CommandUser"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["ResolvedMember"]]],"meta":{"line":23,"file":"resolvedMember.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the member class.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":23,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":10,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"pending","description":"Whether the member is pending verification","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":16,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":14,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","readonly":true,"type":[[["User"]]],"meta":{"line":20,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"displayName","description":"The display name for this member.","readonly":true,"type":[[["string"]]],"meta":{"line":54,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this member.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"resolvedMember.ts","path":"src/structures"}}],"meta":{"line":6,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"Role","description":"Represents a resolved role object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedRole"]]]}],"returns":[[["Role"]]],"meta":{"line":23,"file":"role.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":23,"file":"role.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":22,"file":"role.ts","path":"src/structures"}},{"name":"color","description":"The role's color integer","readonly":true,"type":[[["number"]]],"meta":{"line":14,"file":"role.ts","path":"src/structures"}},{"name":"hoist","description":"Whether the role is being hoisted","readonly":true,"type":[[["boolean"]]],"meta":{"line":16,"file":"role.ts","path":"src/structures"}},{"name":"id","description":"The role's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"role.ts","path":"src/structures"}},{"name":"managed","description":"Whether the role is being managed by an application","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"role.ts","path":"src/structures"}},{"name":"mentionable","description":"Whether the role is mentionable by everyone","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"role.ts","path":"src/structures"}},{"name":"name","description":"The role's name","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"role.ts","path":"src/structures"}},{"name":"position","description":"The role's position","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"role.ts","path":"src/structures"}},{"name":"colorHex","description":"The role's color in hexadecimal, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":45,"file":"role.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this role.","readonly":true,"type":[[["string"]]],"meta":{"line":40,"file":"role.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":50,"file":"role.ts","path":"src/structures"}}],"meta":{"line":6,"file":"role.ts","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the user","type":[[["UserObject"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["User"]]],"meta":{"line":22,"file":"user.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the user class.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":19,"file":"user.ts","path":"src/structures"}},{"name":"_flags","access":"private","type":[[["number"]]],"meta":{"line":22,"file":"user.ts","path":"src/structures"}},{"name":"_flagsBitfield","access":"private","type":[[["UserFlags"]]],"meta":{"line":21,"file":"user.ts","path":"src/structures"}},{"name":"avatar","description":"The user's avatar hash.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":14,"file":"user.ts","path":"src/structures"}},{"name":"bot","description":"Whether the user is a bot.","readonly":true,"type":[[["boolean"]]],"meta":{"line":16,"file":"user.ts","path":"src/structures"}},{"name":"discriminator","description":"The user's discriminator.","readonly":true,"type":[[["string"]]],"meta":{"line":12,"file":"user.ts","path":"src/structures"}},{"name":"id","description":"The user's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"user.ts","path":"src/structures"}},{"name":"username","description":"The user's username.","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"user.ts","path":"src/structures"}},{"name":"avatarURL","description":"The URL of the user's avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatar","description":"The hash for the default avatar of a user if there is no avatar set.","readonly":true,"type":[[["number"]]],"meta":{"line":56,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatarURL","description":"The URL of the user's default avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":61,"file":"user.ts","path":"src/structures"}},{"name":"flags","description":"The public flags for the user.","readonly":true,"type":[[["UserFlags"]]],"meta":{"line":40,"file":"user.ts","path":"src/structures"}},{"name":"mention","description":"A string that mentions the user.","readonly":true,"type":[[["string"]]],"meta":{"line":46,"file":"user.ts","path":"src/structures"}}],"methods":[{"name":"dynamicAvatarURL","description":"Get the user's avatar with the given format and size.","params":[{"name":"format","description":"The format of the avatar","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the avatar","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["string"]]],"meta":{"line":75,"file":"user.ts","path":"src/structures"}}],"meta":{"line":6,"file":"user.ts","path":"src/structures"}},{"name":"UserFlags","description":"Data structure that makes it easy to interact with a {@link User#flags} bitfield.","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["UserFlags"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"The flags for users. Check the source of this property for available flags.","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":27,"file":"userFlags.ts","path":"src/structures"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":18,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":56,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":66,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":106,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":25,"file":"userFlags.ts","path":"src/structures"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["BitField"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"The flags for this bitfield.","scope":"static","type":[[["{}"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":18,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":56,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":66,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":106,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":5,"file":"bitfield.ts","path":"src/util"}},{"name":"MultipartData","props":[{"name":"boundary","default":"\"----------------SlashCreate\"","type":[[["string"]]],"meta":{"line":2,"file":"multipartData.ts","path":"src/util"}},{"name":"bufs","default":"[]","type":[[["Array","<"],["Buffer",">"]]],"meta":{"line":3,"file":"multipartData.ts","path":"src/util"}}],"methods":[{"name":"attach","params":[{"name":"fieldName","type":[[["string"]]]},{"name":"data","type":[[["any"]]]},{"name":"filename","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":5,"file":"multipartData.ts","path":"src/util"}},{"name":"finish","returns":[[["Array","<"],["Buffer",">"]]],"meta":{"line":23,"file":"multipartData.ts","path":"src/util"}}],"meta":{"line":1,"file":"multipartData.ts","path":"src/util"}},{"name":"RequestHandler","description":"The request handler for REST requests.","access":"private","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]}],"returns":[[["RequestHandler"]]],"meta":{"line":47,"file":"requestHandler.ts","path":"src/util"}},"props":[{"name":"_creator","description":"The creator that initialized the handler.","access":"private","type":[[["SlashCreator"]]],"meta":{"line":47,"file":"requestHandler.ts","path":"src/util"}},{"name":"agent","description":"TheHTTP agent used in the request handler.","readonly":true,"type":[[["HTTPS","."],["Agent"]]],"meta":{"line":38,"file":"requestHandler.ts","path":"src/util"}},{"name":"baseURL","description":"The base URL for all requests.","readonly":true,"default":"API_BASE_URL","type":[[["string"]]],"meta":{"line":30,"file":"requestHandler.ts","path":"src/util"}},{"name":"globalBlock","description":"Whether the handler is globally blocked.","default":"false","type":[[["boolean"]]],"meta":{"line":42,"file":"requestHandler.ts","path":"src/util"}},{"name":"latencyRef","description":"The latency reference for the handler.","readonly":true,"type":[[["LatencyRef"]]],"meta":{"line":40,"file":"requestHandler.ts","path":"src/util"}},{"name":"ratelimits","description":"The ratelimits per route.","readonly":true,"type":[[["{}"]]],"meta":{"line":34,"file":"requestHandler.ts","path":"src/util"}},{"name":"readyQueue","description":"The request queue.","readonly":true,"default":"[]","type":[[["Array","<"],["any",">"]]],"meta":{"line":44,"file":"requestHandler.ts","path":"src/util"}},{"name":"requestTimeout","description":"The amount of time a request will timeout.","readonly":true,"type":[[["number"]]],"meta":{"line":36,"file":"requestHandler.ts","path":"src/util"}},{"name":"userAgent","description":"The user agent for all requests.","readonly":true,"default":"USER_AGENT","type":[[["string"]]],"meta":{"line":32,"file":"requestHandler.ts","path":"src/util"}}],"methods":[{"name":"globalUnblock","description":"Unblocks the request handler.","returns":[[["void"]]],"meta":{"line":65,"file":"requestHandler.ts","path":"src/util"}},{"name":"request","description":"Make an API request","params":[{"name":"method","description":"Uppercase HTTP method","type":[[["string"]]]},{"name":"url","description":"URL of the endpoint","type":[[["string"]]]},{"name":"auth","description":"Whether to add the Authorization header and token or not","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"body","description":"Request payload","optional":true,"type":[[["any"]]]},{"name":"file","description":"The file(s) to send","optional":true,"type":[[["any"]]]},{"name":"_route","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"short","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":80,"file":"requestHandler.ts","path":"src/util"}},{"name":"routefy","params":[{"name":"url","type":[[["string"]]]},{"name":"method","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":429,"file":"requestHandler.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":444,"file":"requestHandler.ts","path":"src/util"}}],"meta":{"line":28,"file":"requestHandler.ts","path":"src/util"}},{"name":"SequentialBucket","description":"Ratelimit requests and release in sequence.","access":"private","construct":{"name":"constructor","params":[{"name":"limit","description":"The max number of tokens the bucket can consume per interval","type":[[["number"]]]},{"name":"latencyRef","description":"The latency reference","optional":true,"default":"{ latency: 0 }","type":[[["MinimalLatencyRef"]]]}],"returns":[[["SequentialBucket"]]],"meta":{"line":28,"file":"sequentialBucket.ts","path":"src/util"}},"props":[{"name":"_queue","access":"private","default":"[]","type":[[["Array","<"],["CallbackFunction",">"]]],"meta":{"line":26,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"last","access":"private","type":[[["undefined"," | "],["number"]]],"meta":{"line":28,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"latencyRef","access":"private","type":[[["MinimalLatencyRef"]]],"meta":{"line":25,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"limit","description":"How many tokens the bucket can consume in the current interval.","type":[[["number"]]],"meta":{"line":17,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processing","description":"Whether the queue is being processed.","default":"false","type":[[["boolean"]]],"meta":{"line":19,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processingTimeout","access":"private","type":[[["any"]]],"meta":{"line":27,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"remaining","description":"How many tokens the bucket has left in the current interval.","type":[[["number"]]],"meta":{"line":21,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"reset","description":"Timestamp of next reset.","default":"0","type":[[["number"]]],"meta":{"line":23,"file":"sequentialBucket.ts","path":"src/util"}}],"methods":[{"name":"check","description":"Checks the bucket and runs through the functions.","params":[{"name":"override","description":"Whether to override the processing property","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":43,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"queue","description":"Queue something in the SequentialBucket","params":[{"name":"func","description":"A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work","type":[[["CallbackFunction"]]]},{"name":"short","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":83,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":92,"file":"sequentialBucket.ts","path":"src/util"}}],"meta":{"line":15,"file":"sequentialBucket.ts","path":"src/util"}}],"typedefs":[{"name":"CommandPermissions","description":"The command permission for a {@link SlashCommand}.\nThe object is a guild ID mapped to an array of {@link ApplicationCommandPermissions}.","see":[],"meta":{"line":49,"file":"command.ts","path":"src"}},{"name":"SlashCommandOptions","description":"The options for a {@link SlashCommand}.","meta":{"line":12,"file":"command.ts","path":"src"},"props":[{"name":"defaultPermission","description":"Whether to enable this command for everyone by default. `true` by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"deferEphemeral","description":"Whether responses from this command should defer ephemeral messages.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"guildIDs","description":"The guild ID(s) that this command will be assigned to.","optional":true,"type":[[["string"," | "],["Array","<"],["string",">"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The command's options.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"permissions","description":"The command permissions per guild","optional":true,"type":[[["CommandPermissions"]]]},{"name":"requiredPermissions","description":"The required permission(s) for this command.","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"throttling","description":"The throttling options for the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"unknown","description":"Whether this command is used for unknown commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ThrottleObject","access":"private","meta":{"line":62,"file":"command.ts","path":"src"},"props":[{"name":"start","type":[[["number"]]]},{"name":"timeout","type":[[["any"]]]},{"name":"usages","type":[[["number"]]]}]},{"name":"ThrottlingOptions","description":"The throttling options for a {@link SlashCommand}.","meta":{"line":54,"file":"command.ts","path":"src"},"props":[{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]},{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]}]},{"name":"ApplicationCommandPermissionType","description":"The type of thing to apply the permission to.","meta":{"line":161,"file":"constants.ts","path":"src"},"props":[{"name":"ROLE","description":"A Discord role.","type":[[["1"]]]},{"name":"USER","description":"A Discord user.","type":[[["2"]]]}]},{"name":"ButtonStyle","description":"The types of component button styles.","meta":{"line":446,"file":"constants.ts","path":"src"},"props":[{"name":"DESTRUCTIVE","description":"A red button.","type":[[["4"]]]},{"name":"LINK","description":"A gray button with a link icon.","type":[[["5"]]]},{"name":"PRIMARY","description":"A primary-colored button.","type":[[["1"]]]},{"name":"SECONDARY","description":"A gray, secondary button.","type":[[["2"]]]},{"name":"SUCCESS","description":"A green button.","type":[[["3"]]]}]},{"name":"CommandOptionType","description":"An object mapping the types a command option can use.","meta":{"line":48,"file":"constants.ts","path":"src"},"props":[{"name":"BOOLEAN","description":"A boolean.","type":[[["5"]]]},{"name":"CHANNEL","description":"A channel, this would return the channel's ID in the interaction.","type":[[["7"]]]},{"name":"INTEGER","description":"An integer.","type":[[["4"]]]},{"name":"MENTIONABLE","description":"Anything mentionable, returning the ID of the object.","type":[[["9"]]]},{"name":"ROLE","description":"A role, this would return the role's ID in the interaction.","type":[[["8"]]]},{"name":"STRING","description":"A string.","type":[[["3"]]]},{"name":"SUB_COMMAND","description":"A sub-command for the application's command","type":[[["1"]]]},{"name":"SUB_COMMAND_GROUP","description":"A group of sub-commands","type":[[["2"]]]},{"name":"USER","description":"A user, this would return the user's ID in the interaction.","type":[[["6"]]]}]},{"name":"ComponentType","description":"The types of components available.","meta":{"line":436,"file":"constants.ts","path":"src"},"props":[{"name":"ACTION_ROW","description":"A row of components.","type":[[["1"]]]},{"name":"BUTTON","description":"A button component.","type":[[["2"]]]},{"name":"SELECT","description":"A select component.","type":[[["3"]]]}]},{"name":"InteractionResponseFlags","description":"Message flags for interaction responses.","meta":{"line":40,"file":"constants.ts","path":"src"},"props":[{"name":"EPHEMERAL","description":"Sends a message back to the invoker, similar to messages by Clyde.","type":[[["1 << 6"]]]}]},{"name":"InteractionResponseType","description":"The types of interaction responses.","meta":{"line":24,"file":"constants.ts","path":"src"},"props":[{"name":"CHANNEL_MESSAGE_WITH_SOURCE","description":"Respond with a message, showing the user's input.","type":[[["4"]]]},{"name":"DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE","description":"Create a deferred message with source.","type":[[["5"]]]},{"name":"DEFERRED_UPDATE_MESSAGE","description":"Acknowledge the interaction, edit the original message later.","type":[[["6"]]]},{"name":"PONG","description":"Acknowledge a `PING`.","type":[[["1"]]]},{"name":"UPDATE_MESSAGE","description":"Edits the message the component was attached to.","type":[[["7"]]]}]},{"name":"InteractionType","description":"The types of interactions.","meta":{"line":14,"file":"constants.ts","path":"src"},"props":[{"name":"COMMAND","description":"A command invocation.","type":[[["2"]]]},{"name":"MESSAGE_COMPONENT","description":"An invocation of a message component.","type":[[["3"]]]},{"name":"PING","description":"A ping.","type":[[["1"]]]}]},{"name":"ApplicationCommand","description":"An application command in Discord.","access":"private","meta":{"line":94,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","description":"The application's ID responsible for this command.","type":[[["string"]]]},{"name":"default_permission","description":"Whether to enable this command for everyone by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"guild_id","description":"The guild ID this comamnd is exlusive to.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","description":"The command's ID.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The optoins for the command.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"version","description":"The version ID of the command.","type":[[["string"]]]}]},{"name":"ApplicationCommandOptionArgument","access":"private","meta":{"line":139,"file":"constants.ts","path":"src"},"props":[{"name":"choices","description":"The choices of the option. If set, these are the only values a user can pick from.","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionChoice",">"]]]},{"name":"type","description":"The type of option this one is.","type":[[["STRING"," | "],["INTEGER"]]]}]},{"name":"ApplicationCommandOptionBase","meta":{"line":105,"file":"constants.ts","path":"src"},"props":[{"name":"default","description":"The first required option the user has to complete.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the option.","type":[[["string"]]]},{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"required","description":"Whether the parameter is required.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"type","description":"The type of option this one is.","type":[[["BOOLEAN"," | "],["USER"," | "],["CHANNEL"," | "],["ROLE"," | "],["MENTIONABLE"]]]}]},{"name":"ApplicationCommandOptionChoice","description":"A choice for a user to pick from.","meta":{"line":153,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name of the choice.","type":[[["string"]]]},{"name":"value","description":"The value of the choice.","type":[[["string"," | "],["number"]]]}]},{"name":"ApplicationCommandOptionSubCommand","access":"private","meta":{"line":129,"file":"constants.ts","path":"src"},"props":[{"name":"options","description":"The sub-options for the option. This can only be used for sub-commands and sub-command groups.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"type","description":"The type of option this one is.","type":[[["SUB","_"],["COMMAND"," | "],["SUB","_"],["COMMAND","_"],["GROUP"]]]}]},{"name":"ApplicationCommandPermissions","description":"A permission in a command.","meta":{"line":169,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"permission","type":[[["boolean"]]]},{"name":"type","type":[[["ApplicationCommandPermissionType"]]]}]},{"name":"CommandBooleanOption","access":"private","meta":{"line":420,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType","."],["BOOLEAN"]]]},{"name":"value","type":[[["boolean"]]]}]},{"name":"CommandData","access":"private","meta":{"line":373,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"resolved","optional":true,"type":[[["undefined"," | {"],["\nchannels",": "],["undefined"," | {},"],["\nmembers",": "],["undefined"," | {},"],["\nroles",": "],["undefined"," | {},"],["\nusers",": "],["undefined"," | {}"],["\n","}"]]]}]},{"name":"CommandIntegerOption","access":"private","meta":{"line":412,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType","."],["INTEGER"]]]},{"name":"value","type":[[["number"]]]}]},{"name":"CommandMember","access":"private","meta":{"line":330,"file":"constants.ts","path":"src"},"props":[{"name":"deaf","type":[[["boolean"]]]},{"name":"is_pending","type":[[["boolean"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"mute","type":[[["boolean"]]]},{"name":"nick","type":[[["string"," | "],["null"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"premium_since","type":[[["string"," | "],["null"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]},{"name":"user","type":[[["CommandUser"]]]}]},{"name":"CommandOption","see":[],"access":"private","deprecated":true,"meta":{"line":396,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType"]]]},{"name":"value","optional":true,"type":[[["string"," | "],["number"," | "],["boolean"]]]}]},{"name":"CommandStringOption","access":"private","meta":{"line":404,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["STRING"," | "],["USER"," | "],["CHANNEL"," | "],["ROLE"]]]},{"name":"value","type":[[["string"]]]}]},{"name":"CommandSubcommandOption","access":"private","meta":{"line":428,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"type","optional":true,"type":[[["SUB","_"],["COMMAND"," | "],["SUB","_"],["COMMAND","_"],["GROUP"]]]}]},{"name":"CommandUser","access":"private","meta":{"line":338,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","type":[[["string"," | "],["null"]]]},{"name":"discriminator","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"public_flags","type":[[["number"]]]},{"name":"username","type":[[["string"]]]}]},{"name":"ComponentActionRow","description":"A row of components.","meta":{"line":463,"file":"constants.ts","path":"src"},"props":[{"name":"components","description":"The components to show inside this row.","type":[[["Array","<"],["AnyComponentButton"," | "],["ComponentSelectMenu",">"]]]},{"name":"type","description":"The type of component to use.","type":[[["ACTION","_"],["ROW"]]]}]},{"name":"ComponentButton","description":"A regular component button.","meta":{"line":474,"file":"constants.ts","path":"src"},"props":[{"name":"custom_id","description":"The identifier for this button.","type":[[["string"]]]},{"name":"disabled","description":"Whether this button will show as disabled.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"emoji","description":"The emoji to show inside the button.","optional":true,"type":[[["PartialEmoji"]]]},{"name":"label","description":"The label of the button.","type":[[["string"]]]},{"name":"style","description":"The style of button to show.","type":[[["PRIMARY"," | "],["SECONDARY"," | "],["SUCCESS"," | "],["DESTRUCTIVE"]]]},{"name":"type","description":"The type of component to use.","type":[[["BUTTON"]]]}]},{"name":"ComponentButtonLink","description":"A component button with a link.","meta":{"line":490,"file":"constants.ts","path":"src"},"props":[{"name":"style","description":"The style of button to show.","type":[[["LINK"]]]},{"name":"url","description":"The URL for link buttons.","type":[[["string"]]]}]},{"name":"ComponentSelectMenu","meta":{"line":497,"file":"constants.ts","path":"src"},"props":[{"name":"custom_id","description":"The identifier of the of the menu.","type":[[["string"]]]},{"name":"max_values","description":"The maximum number of items to be chosen.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"min_values","description":"The minimum number of items to be chosen.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"options","description":"The options to show inside this menu.","type":[[["Array","<"],["ComponentSelectOption",">"]]]},{"name":"placeholder","description":"The string to show in absence of a selected option.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"type","description":"The type of component to use.","type":[[["SELECT"]]]}]},{"name":"ComponentSelectOption","meta":{"line":512,"file":"constants.ts","path":"src"},"props":[{"name":"default","description":"Should this render by default","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of this option.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"emoji","description":"The emoji to show with the option.","optional":true,"type":[[["PartialEmoji"]]]},{"name":"label","description":"The label of this option.","type":[[["string"]]]},{"name":"value","description":"The value of this option.","type":[[["string"]]]}]},{"name":"DMInteractionRequestData","description":"A command interaction within a direct message.","access":"private","meta":{"line":225,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["COMMAND"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"DMMessageComponentRequestData","description":"A message component interaction within a direct message.","access":"private","meta":{"line":278,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["{"],["\ncomponent","_"],["type",": "],["ComponentType",","],["\ncustom","_"],["id",": "],["string",","],["\nvalues",": "],["Array","<"],["string",">"],["\n","}"]]]},{"name":"id","type":[[["string"]]]},{"name":"message","type":[[["PartialMessage"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["MESSAGE","_"],["COMPONENT"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"GuildApplicationCommandPermissions","access":"private","meta":{"line":182,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","type":[[["string"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"permissions","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]}]},{"name":"GuildInteractionRequestData","description":"A command interaction within a guild.","access":"private","meta":{"line":239,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["COMMAND"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"GuildMessageComponentRequestData","description":"A message component interaction within a guild.","access":"private","meta":{"line":297,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["{"],["\ncomponent","_"],["type",": "],["ComponentType",","],["\ncustom","_"],["id",": "],["string",","],["\nvalues",": "],["Array","<"],["string",">"],["\n","}"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"message","type":[[["PartialMessage"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["MESSAGE","_"],["COMPONENT"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"PartialApplicationCommand","description":"An partial application command in Discord.","access":"private","meta":{"line":73,"file":"constants.ts","path":"src"},"props":[{"name":"default_permission","description":"Whether to enable this command for everyone by default.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The optoins for the command.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]}]},{"name":"PartialApplicationCommandPermissions","access":"private","meta":{"line":176,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"permissions","type":[[["Array","<"],["ApplicationCommandPermissions",">"]]]}]},{"name":"PartialEmoji","description":"The partial emoji from a message component.","meta":{"line":265,"file":"constants.ts","path":"src"},"props":[{"name":"animated","description":"Whether this emoji is animated.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"id","description":"The ID of the emoji, if it is custom.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","description":"The name of the emoji, or the raw emoji if not custom.","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"PartialMessage","description":"The partial message from a message component interaction.","meta":{"line":257,"file":"constants.ts","path":"src"},"props":[{"name":"flags","description":"The message flags.","type":[[["number"]]]},{"name":"id","description":"The ID of the message.","type":[[["string"]]]}]},{"name":"PingRequestData","description":"A ping interaction.","access":"private","meta":{"line":213,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["PING"]]]},{"name":"user","optional":true,"type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RawRequest","access":"private","meta":{"line":188,"file":"constants.ts","path":"src"},"props":[{"name":"auth","type":[[["boolean"]]]},{"name":"body","type":[[["any"]]]},{"name":"method","type":[[["string"]]]},{"name":"resp","type":[[["IncomingMessage"]]]},{"name":"route","type":[[["string"]]]},{"name":"short","type":[[["boolean"]]]},{"name":"url","type":[[["string"]]]}]},{"name":"RequestData","access":"private","meta":{"line":202,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["InteractionType"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RequireAllOptions","see":["https://www.npmjs.com/package/require-all#usage"],"meta":{"line":526,"file":"constants.ts","path":"src"},"props":[{"name":"dirname","type":[[["string"]]]},{"name":"excludeDirs","optional":true,"type":[[["RegExp"]]]},{"name":"filter","optional":true,"type":[[["("],["name",": "],["string",", "],["path",": "],["string",") => "],["string"," | "],["false"," | "],["undefined"," | "],["RegExp"]]]},{"name":"map","optional":true,"type":[[["undefined"," | ("],["name",": "],["string",", "],["path",": "],["string",") => "],["string"]]]},{"name":"recursive","optional":true,"type":[[["true"," | "],["false"]]]},{"name":"resolve","optional":true,"type":[[["undefined"," | ("],["module",": "],["any",") => "],["any"]]]}]},{"name":"ResolvedChannel","access":"private","meta":{"line":359,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"type","type":[[["number"]]]}]},{"name":"ResolvedMemberData","access":"private","meta":{"line":320,"file":"constants.ts","path":"src"},"props":[{"name":"is_pending","type":[[["boolean"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"nick","type":[[["string"," | "],["null"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"premium_since","type":[[["string"," | "],["null"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]}]},{"name":"ResolvedRole","access":"private","meta":{"line":347,"file":"constants.ts","path":"src"},"props":[{"name":"color","type":[[["number"]]]},{"name":"hoist","type":[[["boolean"]]]},{"name":"id","type":[[["string"]]]},{"name":"managed","type":[[["boolean"]]]},{"name":"mentionable","type":[[["boolean"]]]},{"name":"name","type":[[["string"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"position","type":[[["number"]]]}]},{"name":"AnyCommandOption","access":"private","type":[[["CommandStringOption"," | "],["CommandIntegerOption"," | "],["CommandBooleanOption"," | "],["CommandSubcommandOption"]]],"meta":{"line":386,"file":"constants.ts","path":"src"}},{"name":"AnyComponent","description":"Any component.","type":[[["ComponentActionRow"," | "],["AnyComponentButton"," | "],["ComponentSelectMenu"]]],"meta":{"line":460,"file":"constants.ts","path":"src"}},{"name":"AnyComponentButton","description":"Any component button.","type":[[["ComponentButton"," | "],["ComponentButtonLink"]]],"meta":{"line":471,"file":"constants.ts","path":"src"}},{"name":"AnyRequestData","description":"Any interaction request from Discord.","type":[[["PingRequestData"," | "],["InteractionRequestData"," | "],["MessageComponentRequestData"]]],"meta":{"line":199,"file":"constants.ts","path":"src"}},{"name":"ApplicationCommandOption","description":"An option in an application command.","type":[[["ApplicationCommandOptionBase"," | "],["ApplicationCommandOptionSubCommand"," | "],["ApplicationCommandOptionArgument"]]],"meta":{"line":147,"file":"constants.ts","path":"src"}},{"name":"ImageFormat","description":"Any image format supported by Discord.","type":[[["unknown"," | "],["unknown"," | "],["unknown"," | "],["unknown"," | "],["unknown"]]],"meta":{"line":536,"file":"constants.ts","path":"src"}},{"name":"InteractionRequestData","description":"Any command interaction.","access":"private","type":[[["DMInteractionRequestData"," | "],["GuildInteractionRequestData"]]],"meta":{"line":254,"file":"constants.ts","path":"src"}},{"name":"MessageComponentRequestData","description":"Any message component interaction.","access":"private","type":[[["DMMessageComponentRequestData"," | "],["GuildMessageComponentRequestData"]]],"meta":{"line":317,"file":"constants.ts","path":"src"}},{"name":"SlashCreatorEvents","description":"The events typings for the {@link SlashCreator}.","access":"private","meta":{"line":33,"file":"creator.ts","path":"src"},"props":[{"name":"commandBlock","type":[[["("],["command",": "],["SlashCommand",", "],["ctx",": "],["CommandContext",", "],["reason",": "],["string",", "],["data",": "],["any",") => "],["void"]]]},{"name":"commandError","type":[[["("],["command",": "],["SlashCommand",", "],["err",": "],["Error",", "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandInteraction","type":[[["("],["interaction",": "],["InteractionRequestData",", "],["respond",": "],["RespondFunction",", "],["webserverMode",": "],["boolean",") => "],["void"]]]},{"name":"commandRegister","type":[[["("],["command",": "],["SlashCommand",", "],["creator",": "],["SlashCreator",") => "],["void"]]]},{"name":"commandReregister","type":[[["("],["command",": "],["SlashCommand",", "],["oldCommand",": "],["SlashCommand",") => "],["void"]]]},{"name":"commandRun","type":[[["("],["command",": "],["SlashCommand",", "],["promise",": "],["Promise","<"],["any",">, "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandUnregister","type":[[["("],["command",": "],["SlashCommand",") => "],["void"]]]},{"name":"componentInteraction","type":[[["("],["ctx",": "],["ComponentContext",") => "],["void"]]]},{"name":"debug","type":[[["("],["message",": "],["string",") => "],["void"]]]},{"name":"error","type":[[["("],["err",": "],["Error",") => "],["void"]]]},{"name":"ping","type":[[["("],["user",": "],["CommandUser",") => "],["void"]]]},{"name":"rawInteraction","type":[[["("],["interaction",": "],["AnyRequestData",") => "],["void"]]]},{"name":"rawREST","type":[[["("],["request",": "],["RawRequest",") => "],["void"]]]},{"name":"synced","type":[[["(..."],["args",": "],["unknown","[]) => "],["void"]]]},{"name":"unknownInteraction","type":[[["("],["interaction",": "],["any",") => "],["void"]]]},{"name":"unverifiedRequest","type":[[["("],["treq",": "],["TransformedRequest",") => "],["void"]]]},{"name":"warn","type":[[["("],["warning",": "],["Error"," | "],["string",") => "],["void"]]]}]},{"name":"SlashCreatorOptions","description":"The options for the {@link SlashCreator}.","meta":{"line":54,"file":"creator.ts","path":"src"},"props":[{"name":"agent","description":"A HTTP Agent used to proxy requests","optional":true,"type":[[["HTTPS","."],["Agent"]]]},{"name":"allowedMentions","description":"The default allowed mentions for all messages.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"applicationID","description":"Your Application's ID","type":[[["string"]]]},{"name":"defaultImageFormat","description":"The default format to provide user avatars in.","optional":true,"type":[[["ImageFormat"]]]},{"name":"defaultImageSize","description":"The default image size to provide user avatars in.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"endpointPath","description":"The path where the server will listen for interactions.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"handleCommandsManually","description":"Whether to hand off command interactions to the `commandInteraction` event\nrather than handle it automatically.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"latencyThreshold","description":"The average latency where SlashCreate will start emitting warnings for.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"maxSignatureTimestamp","description":"A number of milliseconds before requests with a timestamp past that time get rejected.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"publicKey","description":"The public key for your application.\nRequired for webservers.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"ratelimiterOffset","description":"A number of milliseconds to offset the ratelimit timing calculations by.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"requestTimeout","description":"A number of milliseconds before requests are considered timed out.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"serverHost","description":"The host where the server will listen on.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"serverPort","description":"The port where the server will listen on.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"token","description":"The bot/client token for the application.\nRecommended to set this in your config.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"unknownCommandResponse","description":"Whether to respond to an unknown command with an ephemeral message.\nIf an unknown command is registered, this is ignored.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"SyncCommandOptions","description":"The options for {@link SlashCreator#syncCommands}.","meta":{"line":102,"file":"creator.ts","path":"src"},"props":[{"name":"deleteCommands","description":"Whether to delete commands that do not exist in the creator.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"skipGuildErrors","description":"Whether to skip over guild syncing errors.\nGuild syncs most likely can error if that guild no longer exists.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"syncGuilds","description":"Whether to sync guild-specific commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"syncPermissions","description":"Whether to sync command permissions after syncing commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ComponentRegisterCallback","type":[[["("],["ctx",": "],["ComponentContext",") => "],["void"]]],"meta":{"line":117,"file":"creator.ts","path":"src"},"params":[{"name":"ctx","type":[[["ComponentContext"]]]}],"returns":[[["void"]]]},{"name":"Response","description":"A general HTTP response.","access":"private","meta":{"line":27,"file":"server.ts","path":"src"},"props":[{"name":"body","description":"The body of the response.","optional":true,"type":[[["any"]]]},{"name":"headers","description":"The headers for the response.","optional":true,"type":[[["undefined"," | {}"]]]},{"name":"status","description":"The status code for the response.","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"ServerOptions","description":"Options for a {@link Server}.","meta":{"line":6,"file":"server.ts","path":"src"},"props":[{"name":"alreadyListening","description":"Whether or not the server is already listening to a port.","type":[[["boolean"]]]}]},{"name":"TransformedRequest","description":"A general HTTP request.","meta":{"line":12,"file":"server.ts","path":"src"},"props":[{"name":"body","description":"The body of the request.","type":[[["any"]]]},{"name":"headers","description":"The headers of the request.","type":[[["{}"]]]},{"name":"request","description":"The request class from a Server, depending on what server it is.","type":[[["any"]]]},{"name":"response","description":"The response class from a Server, depending on what server it is.","type":[[["any"]]]}]},{"name":"InteractionHandler","access":"private","type":[[["("],["interaction",": "],["AnyRequestData",") => "],["void"]]],"meta":{"line":52,"file":"server.ts","path":"src"},"params":[{"name":"interaction","type":[[["AnyRequestData"]]]}],"returns":[[["void"]]]},{"name":"RequestHandler","access":"private","type":[[["("],["treq",": "],["TransformedRequest",", "],["respond",": "],["RespondFunction",") => "],["void"]]],"meta":{"line":46,"file":"server.ts","path":"src"},"params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["void"]]]},{"name":"RespondFunction","access":"private","type":[[["("],["response",": "],["Response",") => "],["Promise","<"],["void",">"]]],"meta":{"line":40,"file":"server.ts","path":"src"},"params":[{"name":"response","type":[[["Response"]]]}],"returns":[[["Promise","<"],["void",">"]]]},{"name":"EventHandler","access":"private","type":[[["("],["handler",": "],["InteractionHandler",") => "],["void"]]],"meta":{"line":4,"file":"gateway.ts","path":"src/servers"},"params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]]},{"name":"EditMessageOptions","description":"The options for {@link MessageInteractionContext#edit}.","meta":{"line":10,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"components","description":"The components of the message.","optional":true,"type":[[["Array","<"],["ComponentActionRow",">"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["MessageEmbedOptions",">"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]}]},{"name":"FollowUpMessageOptions","description":"The options for {@link MessageInteractionContext#sendFollowUp}.","see":[],"deprecated":true,"meta":{"line":39,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"components","description":"The components of the message.","optional":true,"type":[[["Array","<"],["ComponentActionRow",">"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["MessageEmbedOptions",">"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"MessageFile","description":"A file within {@link EditMessageOptions}.","meta":{"line":28,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"file","description":"The attachment to send.","type":[[["Buffer"]]]},{"name":"name","description":"The name of the file.","type":[[["string"]]]}]},{"name":"MessageOptions","description":"The options for {@link MessageInteractionContext#send} and {@link MessageInteractionContext#sendFollowUp}.","meta":{"line":47,"file":"messageInteraction.ts","path":"src/structures/interfaces"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"components","description":"The components of the message.","optional":true,"type":[[["Array","<"],["ComponentActionRow",">"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["MessageEmbedOptions",">"]]]},{"name":"ephemeral","description":"Whether or not the message should be ephemeral.\nIgnored if `flags` is defined.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"EmbedAuthor","meta":{"line":73,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"proxy_icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedAuthorOptions","meta":{"line":76,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedField","meta":{"line":81,"file":"message.ts","path":"src/structures"},"props":[{"name":"inline","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"name","type":[[["string"]]]},{"name":"value","type":[[["string"]]]}]},{"name":"EmbedFooter","meta":{"line":86,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"proxy_icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"text","type":[[["string"]]]}]},{"name":"EmbedFooterOptions","meta":{"line":89,"file":"message.ts","path":"src/structures"},"props":[{"name":"icon_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"text","type":[[["string"]]]}]},{"name":"EmbedImage","meta":{"line":93,"file":"message.ts","path":"src/structures"},"props":[{"name":"height","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"proxy_url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"width","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"EmbedImageOptions","meta":{"line":98,"file":"message.ts","path":"src/structures"},"props":[{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedProvider","meta":{"line":101,"file":"message.ts","path":"src/structures"},"props":[{"name":"name","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"EmbedVideo","meta":{"line":105,"file":"message.ts","path":"src/structures"},"props":[{"name":"height","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"width","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"MessageAttachment","description":"A message attachment.","meta":{"line":30,"file":"message.ts","path":"src/structures"},"props":[{"name":"content_type","description":"The attachment's content type.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"filename","description":"The filename of the attachment.","type":[[["string"]]]},{"name":"height","description":"The height of the image, if the attachment was an image.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"id","description":"The ID of the attachment.","type":[[["string"]]]},{"name":"proxy_url","description":"The proxied URL of the attachment.","type":[[["string"]]]},{"name":"size","description":"The size of the attachment in bytes.","type":[[["number"]]]},{"name":"url","description":"The source URL of the attachment.","type":[[["string"]]]},{"name":"width","description":"The width of the image, if the attachment was an image.","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"MessageEmbed","description":"A message embed.","meta":{"line":64,"file":"message.ts","path":"src/structures"},"props":[{"name":"author","optional":true,"type":[[["EmbedAuthor"]]]},{"name":"footer","optional":true,"type":[[["EmbedFooter"]]]},{"name":"image","optional":true,"type":[[["EmbedImage"]]]},{"name":"provider","optional":true,"type":[[["EmbedProvider"]]]},{"name":"thumbnail","optional":true,"type":[[["EmbedImage"]]]},{"name":"type","type":[[["string"]]]},{"name":"video","optional":true,"type":[[["EmbedVideo"]]]}]},{"name":"MessageEmbedOptions","description":"Options to creating a message embed.","meta":{"line":50,"file":"message.ts","path":"src/structures"},"props":[{"name":"author","optional":true,"type":[[["EmbedAuthorOptions"]]]},{"name":"color","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"description","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"fields","optional":true,"type":[[["Array","<"],["EmbedField",">"]]]},{"name":"footer","optional":true,"type":[[["EmbedFooterOptions"]]]},{"name":"image","optional":true,"type":[[["EmbedImageOptions"]]]},{"name":"thumbnail","optional":true,"type":[[["EmbedImageOptions"]]]},{"name":"timestamp","optional":true,"type":[[["Date"," | "],["string"]]]},{"name":"title","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"url","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"MessageInteraction","description":"A message interaction.","meta":{"line":8,"file":"message.ts","path":"src/structures"},"props":[{"name":"id","description":"The ID of the interaction.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"type","description":"The type of interaction.","type":[[["InteractionType"]]]},{"name":"user","description":"The user who invoked the interaction.","type":[[["User"]]]}]},{"name":"MessageReference","description":"A message reference.","meta":{"line":20,"file":"message.ts","path":"src/structures"},"props":[{"name":"channelID","description":"The ID of the channel the reference is from.","type":[[["string"]]]},{"name":"guildID","description":"The ID of the guild the reference is from.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"messageID","description":"The message ID of the reference.","optional":true,"type":[[["undefined"," | "],["string"]]]}]},{"name":"FormattedAllowedMentions","description":"The formatted allowed_mentions for Discord.","access":"private","meta":{"line":40,"file":"util.ts","path":"src"},"props":[{"name":"parse","type":[[["Array","<"],["unknown"," | "],["unknown"," | "],["unknown",">"]]]},{"name":"roles","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["Array","<"],["string",">"]]]}]},{"name":"MessageAllowedMentions","description":"The allowed mentions for a {@link Message}.","meta":{"line":30,"file":"util.ts","path":"src"},"props":[{"name":"everyone","type":[[["boolean"]]]},{"name":"roles","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]}]},{"name":"BitFieldResolvable","type":[[["string"," | "],["number"," | "],["bigint"," | "],["BitField"," | "],["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":2,"file":"bitfield.ts","path":"src/util"}}]}