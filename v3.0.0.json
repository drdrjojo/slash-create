{"meta":{"version":"2.0.0","format":20,"date":1616697070372},"custom":{"general":{"name":"General","files":{"welcome":{"name":"Welcome","type":"md","content":"<div align=\"center\">\n\n<img src=\"/static/textlogo.png\" height=\"50\">\n\n[![NPM version](https://img.shields.io/npm/v/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![NPM downloads](https://img.shields.io/npm/dt/slash-create?maxAge=3600)](https://www.npmjs.com/package/slash-create) [![ESLint status](https://github.com/Snazzah/slash-create/workflows/ESLint/badge.svg)](https://github.com/Snazzah/slash-create/actions?query=workflow%3A%22ESLint%22) [![DeepScan grade](https://deepscan.io/api/teams/11596/projects/15103/branches/297399/badge/grade.svg)](https://deepscan.io/dashboard#view=project&tid=11596&pid=15103&bid=297399) [![discord chat](https://img.shields.io/discord/311027228177727508?logo=discord&logoColor=white)](https://snaz.in/discord)\n\nCreator and handler for Discord's [slash commands](https://discord.com/developers/docs/interactions/slash-commands).\n\nYou can create commands similar to Discord.JS [Commando](https://github.com/discordjs/Commando).\n\n\n</div>\n\n## Features\n- Multiple server support ([Express](http://expressjs.com/), [Fastify](https://fastify.io/), etc.)\n- Hook into an existing Discord bot client\n- Command syncing - Sync commands with your creator automatically.\n- Load commands from a folder\n- Command throttling/cooldowns\n\n## Quickstart\nIf you want an easy start on getting slash commands on your bot, you can use the [Snazzah/slash-create-template] template.\n```sh\nnpx degit Snazzah/slash-create-template slash-commands\ncd slash-commands\nnpm i -g yarn\nyarn\ncp .env.example .env # this copies the .env file, edit variables in this file!\n```\nAfter installing, you can edit commands to your liking and start it up with `yarn start`.\n\n## Installation\n```sh\nnpm i slash-create\n```\nOr, using yarn:\n```sh\nyarn add slash-create\n```\n\n### Using webservers\nIn order to use a specific webserver, you will need to install the dependency associated with that server. The following server types require these dependencies:\n- `ExpressServer`: `express`\n- `FastifyServer`: `fastify`\n- `GatewayServer`: none, see [example](#/docs/main/latest/examples/discord-bot)\n- `GCFServer`: none technically, meant for use with [`@google-cloud/functions-framework`](https://npm.im/@google-cloud/functions-framework), see [example](https://slash-create.js.org/#/docs/main/latest/examples/gcf)\n\n## Example\n\n### Creating a SlashCreator\n```js\nconst { SlashCreator } = require('slash-create');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n```\n\n### Adding commands and syncing them\n```js\nconst path = require('path');\n\ncreator\n    // Registers all of your commands in the ./commands/ directory\n    .registerCommandsIn(path.join(__dirname, 'commands'))\n    // This will sync commands to Discord, it must be called after commands are loaded.\n    // This also returns itself for more chaining capabilities.\n    .syncCommands();\n```\n\n### Adding a webserver\n```js\nconst { ExpressServer } = require('slash-create');\nconst path = require('path');\n\ncreator\n    .withServer(new ExpressServer())\n    // Depending on what server is used, this may not be needed.\n    .startServer();\n\n/**\n * By default, this serves to `127.0.0.1:80/interactions`.\n * You can change the `serverPort` and `endpointPath` to affect where to serve to.\n */\n\n/**\n * You can also initialize the server with an existing application.\n * If you are doing this with express applications, the express application must already have `express.json()` as middleware.\n */\n\ncreator\n    // Set `alreadyListening` if the server has already started.\n    .withServer(new ExpressServer(app, { alreadyListening: true }));\n```\n\n### Using a Discord Bot with /create\n```js\nconst { GatewayServer } = require('slash-create');\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.ws.on('INTERACTION_CREATE', handler)\n    )\n  );\n\nclient.login('BOT_TOKEN_HERE');\n```\n\n### Example Command\n```js\nconst { SlashCommand } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      description: 'Says hello to you.'\n    });\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    return `Hello, ${ctx.user.username}!`;\n  }\n}\n```\n\n## Useful Links\n- [**Discord Documentation on Slash Commands**](https://discord.com/developers/docs/interactions/slash-commands)\n- [Website](https://slash-create.js.org/) ([source](https://github.com/Snazzah/slash-create-website))\n- [Documentation](https://slash-create.js.org/#/docs/main/latest/general/welcome)\n- [Commands Template](https://github.com/Snazzah/slash-create-template)\n- [GitHub](https://github.com/Snazzah/slash-create)\n- [NPM](https://www.npmjs.com/package/slash-create)\n\n<div align=\"center\">\n    <a target=\"_blank\" href=\"https://snaz.in/discord\" title=\"Join the Discord!\">\n        <img  src=\"https://discordapp.com/api/guilds/311027228177727508/widget.png?style=banner2\" height=\"76px\" draggable=\"false\" alt=\"Join the Discord!\">\n    </a>\n</div>\n\n##### Resources & References\nThis project borrows resources and references from the following repositories:\n- [dbots.js](https://github.com/dbots-pkg/dbots.js)\n- [eris](https://github.com/abalabahaha/eris)\n- [discord.js](https://github.com/discordjs/discord.js)\n- [Commando](https://github.com/discordjs/Commando)\n- [slash-worker](https://github.com/A5rocks/slash-worker)\n- [slash-commands](https://github.com/MeguminSama/discord-slash-commands)\n- [discord-interactions](https://github.com/discord/discord-interactions-js)\n","path":"docs/general/welcome.md"},"faq":{"name":"FAQ","type":"md","content":"# FAQ\n\n## Terminology\n\n### What are **initial messages**?\nAny first response sent out during the \"Sending command...\" message. The initial response can be a plain message or a deferred message.\n\n### What is a **deferred message**?\nA deferred message is an acknowlegement that the message will soon be edited later on. A deferred message has been sent if the response is the \"Bot is thinking...\" message.\n\n## Common Problems\n\n### `ts-node` can't load commands from folders!\n`ts-node` only compiles other TypeScript files that are imported directly and because of this, no other files are compiled and therefore not recognized. You will need to use `tsc` in order to compile everything or try [ts-devscript](https://npm.im/ts-devscript) for development environments.\n\n### My attachments aren't showing!\nAttachments cannot be sent within **ephemeral messages** and **initial messages**. You should also make sure that the files are sending **buffers**.\n\n```js\nctx.send({\n  content: 'hello',\n  file: {\n    name: 'avatar.png',\n    file: fs.readFileSync('avatar.png')\n  }\n});\n```\n\n## External Libraries\n\n### How can I get the client from my slash command?\nslash-create does not support passing a client through the command context, since the library is also used for webservers.\n```js\n// bot.js\nconst Discord = require('discord.js');\nconst { SlashCreator, GatewayServer } = require('slash-create');\n\nconst client = new Discord.Client(/* ... */);\n// ...\n\nmodule.exports = client;\n```\n```js\n// commands/command.js\nconst { SlashCommand, CommandOptionType } = require('slash-create');\nconst client = require(\"../bot.js\");\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  // ...\n  async run(ctx) {\n    // do stuff with the client...\n  }\n}\n```\n\n### MessageEmbed doesn't work with this!\nslash-create doesn't support `discord.js`'s MessageEmbed out of the box.\nYou can still use the builder if you send an embed JSON.\n```js\nconst embed = new Discord.MessageEmbed()\n  .setTitle('Hi')\n  .setColor('RANDOM')\n  .setTimestamp()\n  .setDescription('Hello');\n\nctx.send([\n  embeds: [embed.toJSON()]\n])\n```\n","path":"docs/general/faq.md"},"changelog":{"name":"Changelog","type":"md","content":"# Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n## [3.0.0] - 2021-03-25\n### Removed:\n- **[BREAKING]** `SlashCreatorOptions#autoAcknowledgeSource` has been removed.\n- **[BREAKING]** `MessageOptions#includeSource` is removed.\n- **[BREAKING]** `InteractionResponseType.ACKNOWLEDGE` and `InteractionResponseType.CHANNEL_MESSAGE` has been removed\n- `Util.objectKeySort` is now removed.\n\n### Changed:\n- **[BREAKING]** `CommandContext#acknowledge` -> `CommandContext#defer`\n  - Deferred messages are like acknowledgements, but editable and used for processing requests.\n  - `CommandContext#defer` has one argument (`ephemeral`) for if the deferred message should be ephemeral.\n- Docs now refer \"auto-acknowledge\" to \"auto-defer\"\n- Command option and subcommand limit has increased to 25\n- `CommandContext#send` now edits a deferred message if there was a deferred message sent.\n- **[BREAKING]** `InteractionResponseType.ACKNOWLEDGE_WITH_SOURCE` -> `InteractionResponseType.DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE`\n\n### Added:\n- `SlashCommandOptions#deferEphemeral` - Whether auto-deferring should be an ephemeral message.\n- `CommandContext#deferred` - Whether the initial response has an available deferred message.\n- Ability to send attachments with `CommandContext#send`\n- Added FAQ page in documentation\n### Fixed:\n- Documentation for ResolvedMembers\n- `SlashCommand#onBlock` and `SlashCommand#onError` giving weird return types in documentation\n## [2.1.2] - 2021-03-16\n### Changed:\n- `Util.objectKeySort` is now deprecated.\n### Fixed:\n- Syncing commands had a major bug, sorry. ([#36](https://github.com/Snazzah/slash-create/pull/36))\n## [2.1.1] - 2021-03-06\n### Changed:\n- Types for most of the command options reflect on how reliable the `type` property is.\n### Fixed:\n- Removed checking the `type` property within options to check for subcommand array and options. Not all clients send this type and should not be reliable.\n## [2.1.0] - 2021-02-19\n### Changed:\n- Typings for command options have the `type` prop\n- `CommandOption` is deprecated\n- `CommandStringOption`, `CommandIntegerOption`, `CommandBooleanOption` are in the index\n### Added:\n- CommandContexts now support resolved objects\n  - `CommandContext#members`, `CommandContext#users`, `CommandContext#roles`, `CommandContext#channels`\n  - Note: `ResolvedMember`s in `CommandContext#members` do not have `mute`, `deaf` and `permissions` properties.\n### Fixed:\n- Updated interaction data typings with the `type` prop\n## [2.0.0] - 2021-02-11\n### Changed:\n- The typings for `DMInteractionRequestData` and `GuildInteractionRequestData` is in the index.\n- The typing for `InteractionRequestData` is now a **type** rather than an **interface**.\n- The `ping` event now has a `user` parameter.\n- **[BREAKING]** `CommandContext#member` and `CommandContext#guildID` is now only given in a guild context.\n- **[BREAKING]** `guildID` in command options is now `guildIDs`.\n- **[BREAKING]** `SlashCommand#guildID` has been replaced with `SlashCommand#guildIDs`.\n### Added:\n- Support for updating commands in bulk. This is now used in syncing.\n- Support for multiple guild IDs in a command class.\n    - `CommandOptions#guildIDs` can either be a string or an array of strings.\n- Support for direct message commands.\n  - `CommandContext#user` can be used in DM and guild contexts.\n### Fixed:\n- Unnessesary command updating while syncing.\n## [1.3.0] - 2021-01-04\n### Changed:\n- Permission bitfield now uses bigints\n- Command syncing now uses `lodash.isEqual` to check for\n- `publicKey` in creator options is now optional\n- Typing changes\n  - `CommandOption` in constants has split off into `CommandSubcommandOption` and `AnyCommandOption`, not allowing you to define options and a value.\n  - Typings for `User`, `Member` and `Message` have been set to read-only\n  - Most undocumented typings are hidden/privated\n- Export changes\n  - Some constant exports now exports to index: `InteractionType`, `InterationResponseType`, `InteractionResponseFlags`, `CommandOptionType`, `PartialApplicationCommand`, `ApplicationCommand`, `ApplicationCommandOption`, `ApplicationCommandOptionChoice`, `RawRequest`, `AnyRequestData`, `PingRequestData`, `InteractionRequestData`, `CommandMember`, `CommandUser`, `CommandData`, `AnyCommandOption`, `CommandOption`, `CommandSubcommandOption`, `ImageFormat`\n  - `ConvertedOption` now exports to index\n  - `SlashCommandOptions` now exports to index\n### Added:\n- Commands will automatically acknowledge after 3 seconds to avoid interaction invalidation\n  - You can also set `autoAcknowledgeSource` within creator options\n- Documentation for unknown commands\n- `Member#pending`\n### Fixed:\n- SlashCreator documentation\n- Option validation for unknown commands\n- Typings are ignored for `express` and `fastify`\n## [1.2.0] - 2020-12-19\n### Changed:\n- `ctx.options` are a bit more consistent with sub-commands. Check the [last heading in the documetation](#/docs/main/v1.2.0/general/context-options) for an example.\n### Added:\n- Support for registering/unregistering commands\n  - New `SlashCreator` event: `commandUnregister`\n  - New `SlashCreator` event: `commandReregister`\n  - `SlashCreator.reregisterCommand(command, oldCommand)`\n  - `SlashCreator.unregisterCommand(command)`\n  - `SlashCommand.reload()`\n  - `SlashCommand.unload()`\n- Unknown Commands\n- [Support for Google Cloud Functions](https://slash-create.js.org/#/docs/main/v1.2.0/examples/gcf). (`GCFServer`)\n### Fixed:\n- Some documentation\n- Command finalization\n- Command throttling\n- Command options validation\n## [1.1.6] - 2020-12-18\n### Fixed:\n- Sending options as the first argument in `Context#send` & `Context#sendFollowUp`\n## [1.1.5] - 2020-12-18\n### Fixed:\n- Sending options as the first argument in `Context#edit`\n## [1.1.4] - 2020-12-17\n### Changed:\n- Added more validation for options\n### Added:\n- `CommandContext#subcommands`\n### Fixed:\n- Option choices validation\n## [1.1.3] - 2020-12-17\n### Changed:\n- Errors in `SlashCreator#startServer` are no longer caught.\n- The default port is now `8030`.\n- Some documentation clarifying things like tokens.\n### Fixed:\n- Moved `typed-emitter` to dependencies, fixing typings\n## [1.1.2] - 2020-12-17\n### Fixed:\n- Race conditions for command finalization\n- Errors in `SlashCommand#onError` goes to `SlashCreator#error`\n## [1.1.1] - 2020-12-17\n### Changed:\n- `CommandContext#options` is now a non-null object\n### Fixed:\n- Loading commands in a folder\n## [1.1.0] - 2020-12-17\nThis release features mostly completed documentation and changes to the packages typings. If you are using TypeScript for this package, consider this a **breaking change**.\n### Changed:\n- **[SEMI-BREAKING]** Index changes\n  - `Command` -> `SlashCommand`\n  - `Creator` -> `SlashCreator`\n  - `CommandContext` is aliased as `Context`\n  - `SlashCommand` is aliased as `Command`\n  - `SlashCreator` is aliased as `Creator`\n  - If you are using any of the changed classes for typings, you must use its class name.\n    - i.e. `{ Creator }` must be `{ SlashCreator }`\n- (typings) Renamed `AllRequestData` to `AnyRequestData`\n- (typings) Renamed `FastifyOpts` to `FastifyOptions`\n- (typings) Renamed duplicate `LatencyRef` interface in SequentialBucket to `MinimalLatencyRef`\n- (typings) Added CallbackFunction type for SequentialBucket\n### Added:\n- Fastify typings for `FastifyServer#createEndpoint`\n### Fixed:\n- Changed HTTP method in `SlashCommandAPI#updateCommand` from `PUT` to `PATCH`\n- `User#flags` now actually uses `UserFlags`\n- Renamed UserFlags class to the name \"UserFlags\"\n## [1.0.0] - 2020-12-16\n### Removed:\n- **[BREAKING]** `Context.initialResponseDeleted`\n- **[BREAKING]** `treq` parameter from `SlashCreator#ping` event -  The event no longer emits any parameters\n### Changed:\n- **[BREAKING]** `treq` parameter in `SlashCreator#unknownInteraction` event is now `interaction`\n### Added:\n- More documentation\n- `Context.edit(messageID, content, options)`\n- `Context.editOriginal(messageID, content, options)`\n- `Context.expired` and internal handlers using this\n- `Context.sendFollowUp(content, options)`\n- `Message` and `User` class\n- `GatewayServer` - Support for gateway events\n- `SlashCreatorAPI.interactionCallback(id, token, body)`\n- `Server.isWebserver`\n- `Server.handleInteraction()`\n### Fixed:\n- Default error messages\n- Exports for Constants and CommandOptionType\n## [0.2.0] - 2020-12-16\n### Removed:\n- **[BREAKING]** `Context.acknowledge` now returns a promise\n- **[BREAKING]** Removed `returnPromise` from syncCommands\n### Added:\n- Errors will be thrown if a Server without its installed package is instantiated\n### Fixed:\n- RespondFunction is now a promise\n- `Context.send` erroring\n- Added/Updated debug emit lines\n- ExpressServer for TypeScript\n## [0.1.0] - 2020-12-15\n- Initial release.\n\n[Unreleased]: https://github.com/Snazzah/slash-create/compare/v3.0.0...HEAD\n[0.1.0]: https://github.com/Snazzah/slash-create/releases/tag/v0.1.0\n[0.2.0]: https://github.com/Snazzah/slash-create/compare/v0.1.0...v0.2.0\n[1.0.0]: https://github.com/Snazzah/slash-create/compare/v0.2.0...v1.0.0\n[1.1.0]: https://github.com/Snazzah/slash-create/compare/v1.0.0...v1.1.0\n[1.1.1]: https://github.com/Snazzah/slash-create/compare/v1.0.0...v1.1.1\n[1.1.2]: https://github.com/Snazzah/slash-create/compare/v1.1.1...v1.1.2\n[1.1.3]: https://github.com/Snazzah/slash-create/compare/v1.1.2...v1.1.3\n[1.1.4]: https://github.com/Snazzah/slash-create/compare/v1.1.3...v1.1.4\n[1.1.5]: https://github.com/Snazzah/slash-create/compare/v1.1.4...v1.1.5\n[1.1.6]: https://github.com/Snazzah/slash-create/compare/v1.1.5...v1.1.6\n[1.2.0]: https://github.com/Snazzah/slash-create/compare/v1.1.6...v1.2.0\n[1.3.0]: https://github.com/Snazzah/slash-create/compare/v1.2.0...v1.3.0\n[2.0.0]: https://github.com/Snazzah/slash-create/compare/v1.3.0...v2.0.0\n[2.1.0]: https://github.com/Snazzah/slash-create/compare/v2.0.0...v2.1.0\n[2.1.1]: https://github.com/Snazzah/slash-create/compare/v2.1.0...v2.1.1\n[2.1.2]: https://github.com/Snazzah/slash-create/compare/v2.1.1...v2.1.2\n[3.0.0]: https://github.com/Snazzah/slash-create/compare/v2.1.2...v3.0.0\n","path":"docs/general/changelog.md"},"context-options":{"name":"CommandContext.options","type":"md","content":"When getting options from a context, it's important to know the format of the options. This is dependent on the options that you defined in the command.\n\n### Normal commands\nFor commands without any subcommands, each option should be mapped to a key with it's respective value.\n\n```js\noptions: [{\n  type: CommandOptionType.STRING,\n  name: 'food',\n  description: 'What food do you like?'\n}, {\n  type: CommandOptionType.STRING,\n  name: 'drink',\n  description: 'What drink do you want?'\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    food: 'cheeseburger',\n    drink: 'fanta'\n  }\n*/\n```\n\n### Nested commands\nFor commands with subcommands or subcommand groups, options go down the line of the subcommand it came from.\n\n```js\noptions: [{\n  type: CommandOptionType.SUB_COMMAND,\n  name: 'order',\n  description: 'Order some food.'\n  options: [{\n    type: CommandOptionType.STRING,\n    name: 'food',\n    description: 'What food do you want?'\n  }, {\n    type: CommandOptionType.STRING,\n    name: 'drink',\n    description: 'What drink do you want?'\n  }]\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    order: {\n      food: 'cheeseburger',\n      drink: 'fanta'\n    }\n  }\n*/\n```\n\n### Nested commands with no options\nIf any nested command have optional options and the user provides nothing, an empty object will be in place.\n\n```js\noptions: [{\n  type: CommandOptionType.SUB_COMMAND,\n  name: 'order',\n  description: 'Order some food.'\n  options: [{\n    type: CommandOptionType.STRING,\n    name: 'food',\n    description: 'What food do you want?'\n  }, {\n    type: CommandOptionType.STRING,\n    name: 'drink',\n    description: 'What drink do you want?'\n  }]\n}]\n\nconsole.log(ctx.options)\n/*\n  {\n    order: {}\n  }\n*/\n```\n","path":"docs/general/context-options.md"},"unknown-command":{"name":"Unknown commands","type":"md","content":"Unknown commands are commands that fill in for commands that could not be found loaded in the creator. They are not stored normally like regular commands. This can be helpful if a guild has not yet cached the newest version of the global commands or you do not wish to sync commands in order to not lose configuration.\n\nTo make a command handled by unknown commands, you can set `unknown` to `true` in the command options.\n\nImportant notes about unknown commands:\n- The `name`, `description`, `guildID`, `requiredPermissions` and `options` are not considered, since this can be called from any command.\n- They do not use the `hasPermission` and the `onBlock` function, however the `onError` function is still used.\n","path":"docs/general/unknown-command.md"}}},"examples":{"name":"Examples","files":{"basic":{"name":"Basic Example","type":"js","content":"const { SlashCreator } = require('slash-create');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n    // Registers all of your commands in the ./commands/ directory\n    .registerCommandsIn(path.join(__dirname, 'commands'))\n    // This will sync commands to Discord, it must be called after commands are loaded.\n    // This also returns itself for more chaining capabilities.\n    .syncCommands();\n","path":"docs/examples/basic.js"},"webserver":{"name":"Using a Webserver","type":"js","content":"const { ExpressServer } = require('slash-create');\n\ncreator\n    .withServer(new ExpressServer())\n    // Depending on what server is used, this may not be needed.\n    .startServer();\n\n/**\n * By default, this serves to `127.0.0.1:80/interactions`.\n * You can change the `serverPort` and `endpointPath` to affect where to serve to.\n */\n\n/**\n * You can also initialize the server with an existing application.\n * If you are doing this with express applications, the express application must already have `express.json()` as middleware.\n */\n\ncreator\n    // Set `alreadyListening` if the server has already started.\n    .withServer(new ExpressServer(app, { alreadyListening: true }));\n","path":"docs/examples/webserver.js"},"discord-bot":{"name":"Using a Discord Bot","type":"md","content":"### With [discord.js](https://github.com/discordjs/discord.js)\n```js\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst Discord = require('discord.js');\nconst client = new Discord.Client();\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.ws.on('INTERACTION_CREATE', handler)\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  .syncCommands();\n\nclient.login('BOT_TOKEN_HERE');\n```\n### With [eris](https://github.com/abalabahaha/eris)\n```js\nconst { SlashCreator, GatewayServer } = require('slash-create');\nconst Eris = require('eris');\nconst client = new Eris('BOT_TOKEN_HERE');\nconst path = require('path');\nconst creator = new SlashCreator({\n  applicationID: '12345678901234567',\n  publicKey: 'CLIENT_PUBLIC_KEY',\n  token: 'BOT_TOKEN_HERE',\n});\n\ncreator\n  .withServer(\n    new GatewayServer(\n      (handler) => client.on('rawWS', (event) => {\n        if (event.t === 'INTERACTION_CREATE') handler(event.d);\n      })\n    )\n  )\n  .registerCommandsIn(path.join(__dirname, 'commands'))\n  .syncCommands();\n\nclient.connect();\n```\n","path":"docs/examples/discord-bot.md"},"command":{"name":"Example Command","type":"js","content":"const { SlashCommand, CommandOptionType } = require('slash-create');\n\nmodule.exports = class HelloCommand extends SlashCommand {\n  constructor(creator) {\n    super(creator, {\n      name: 'hello',\n      description: 'Says hello to you.',\n      options: [{\n        type: CommandOptionType.STRING,\n        name: 'food',\n        description: 'What food do you like?'\n      }]\n    });\n\n    // Not required initially, but required for reloading with a fresh file.\n    this.filePath = __filename;\n  }\n\n  async run(ctx) {\n    return ctx.options.food ? `You like ${ctx.options.food}? Nice!` : `Hello, ${ctx.user.username}!`;\n  }\n}\n","path":"docs/examples/command.js"},"gcf":{"name":"Google Cloud Functions","type":"md","content":"Before using the server, check out [how to use the functions module](https://www.npmjs.com/package/@google-cloud/functions-framework).\n\n```js\nconst { GCFServer } = require('slash-create');\n\ncreator\n  // The first argument is required, but rhe second argument is the \"target\" or the name of the export.\n  // By default, the target is \"interactions\".\n  .withServer(new GCFServer(module.exports))\n  .registerCommandsIn(path.join(__dirname, 'commands'));\n```\n\nIf you want more examples of using Google services, check out [jasondamour/discord-gcloud-commands](https://github.com/jasondamour/discord-gcloud-commands).\n","path":"docs/examples/gcf.md"}}}},"classes":[{"name":"SlashCreatorAPI","description":"The API handler for {@link SlashCreator}.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]}],"returns":[[["SlashCreatorAPI"]]],"meta":{"line":7,"file":"api.ts","path":"src"}},"props":[{"name":"_creator","description":"The parent creator.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":7,"file":"api.ts","path":"src"}}],"methods":[{"name":"createCommand","description":"Creates a command.","params":[{"name":"command","description":"The command to create.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the command is global.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":32,"file":"api.ts","path":"src"}},{"name":"deleteCommand","description":"Deletes a command.","params":[{"name":"commandID","description":"The command ID to delete.","type":[[["string"]]]},{"name":"guildID","description":"The guild ID to delete the command. If undefined, the global command is deleted.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":81,"file":"api.ts","path":"src"}},{"name":"getCommands","description":"Gets the commands from an applicaton.","params":[{"name":"guildID","description":"The guild ID to get commands from. If undefined, global commands are fetched.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["Array","<"],["ApplicationCommand",">>"]]],"meta":{"line":18,"file":"api.ts","path":"src"}},{"name":"interactionCallback","description":"Responds to an interaction.","params":[{"name":"interactionID","description":"The interaction's ID.","type":[[["string"]]]},{"name":"interactionToken","description":"The interaction's token.","type":[[["string"]]]},{"name":"body","description":"The body to send.","type":[[["any"]]]}],"returns":[[["Promise","<"],["unknown",">"]]],"meta":{"line":96,"file":"api.ts","path":"src"}},{"name":"updateCommand","description":"Updates a command.","params":[{"name":"commandID","description":"The command ID to update.","type":[[["string"]]]},{"name":"command","description":"The payload to update the command to.","type":[[["PartialApplicationCommand"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":49,"file":"api.ts","path":"src"}},{"name":"updateCommands","description":"Updates multiple commands.","params":[{"name":"commands","description":"The payload to update the commands to.","type":[[["Array","<"],["BulkUpdateCommand",">"]]]},{"name":"guildID","description":"The guild ID to put the command on. If undefined, the global command is updated.","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["ApplicationCommand",">"]]],"meta":{"line":65,"file":"api.ts","path":"src"}}],"meta":{"line":5,"file":"api.ts","path":"src"}},{"name":"SlashCommand","description":"Represents a Discord slash command.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"opts","description":"The options for the command.","type":[[["SlashCommandOptions"]]]}],"returns":[[["SlashCommand"]]],"meta":{"line":70,"file":"command.ts","path":"src"}},"props":[{"name":"_throttles","description":"Current throttle objects for the command, mapped by user ID.","access":"private","default":"new Map<string, ThrottleObject>()","type":[[["Map","<"],["string",", "],["ThrottleObject",">"]]],"meta":{"line":70,"file":"command.ts","path":"src"}},{"name":"commandName","description":"The command's name.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"command.ts","path":"src"}},{"name":"creator","description":"The creator responsible for this command.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":67,"file":"command.ts","path":"src"}},{"name":"deferEphemeral","description":"Whether responses from this command should defer ephemeral messages.","readonly":true,"type":[[["boolean"]]],"meta":{"line":58,"file":"command.ts","path":"src"}},{"name":"description","description":"The command's description.","readonly":true,"type":[[["string"]]],"meta":{"line":46,"file":"command.ts","path":"src"}},{"name":"filePath","description":"The file path of the command.\nUsed for refreshing the require cache.\nSet this to `__filename` in the constructor to enable cache clearing.","type":[[["undefined"," | "],["string"]]],"meta":{"line":64,"file":"command.ts","path":"src"}},{"name":"guildIDs","description":"The guild ID(s) for the command.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":50,"file":"command.ts","path":"src"}},{"name":"options","description":"The options for the command.","readonly":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]],"meta":{"line":48,"file":"command.ts","path":"src"}},{"name":"requiredPermissions","description":"The permissions required to use this command.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":52,"file":"command.ts","path":"src"}},{"name":"throttling","description":"The throttling options for this command.","readonly":true,"type":[[["ThrottlingOptions"]]],"meta":{"line":54,"file":"command.ts","path":"src"}},{"name":"unknown","description":"Whether this command is used for unknown commands.","readonly":true,"type":[[["boolean"]]],"meta":{"line":56,"file":"command.ts","path":"src"}},{"name":"commandJSON","description":"The JSON for using commands in Discord's API.","access":"private","readonly":true,"type":[[["PartialApplicationCommand"]]],"meta":{"line":96,"file":"command.ts","path":"src"}},{"name":"keyName","description":"The internal key name for the command.","access":"private","readonly":true,"type":[[["string"]]],"meta":{"line":108,"file":"command.ts","path":"src"}}],"methods":[{"name":"finalize","description":"Finalizes the return output","access":"private","params":[{"name":"response","description":"The response from the command","type":[[["any"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["undefined"," | "],["Promise","<"],["false"," | "],["true"," | "],["Message",">"]]],"meta":{"line":223,"file":"command.ts","path":"src"}},{"name":"hasPermission","description":"Checks whether the context member has permission to use the command.","params":[{"name":"ctx","description":"The triggering context","type":[[["CommandContext"]]]}],"returns":[[["boolean"," | "],["string"]]],"returnsDescription":"Whether the member has permission, or an error message to respond with if they don't\n","meta":{"line":118,"file":"command.ts","path":"src"}},{"name":"onBlock","description":"Called when the command is prevented from running.","params":[{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked\n(built-in reasons are `permission`, `throttling`)","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.\n- permission: `response` ({@link string}) to send\n- throttling: `throttle` ({@link Object}), `remaining` ({@link number}) time in seconds","optional":true,"type":[[["any"]]]}],"returns":[[["any"]]],"meta":{"line":146,"file":"command.ts","path":"src"}},{"name":"onError","description":"Called when the command produces an error while running.","params":[{"name":"err","description":"Error that was thrown","type":[[["Error"]]]},{"name":"ctx","description":"Command context the command is running from","type":[[["CommandContext"]]]}],"returns":[[["any"]]],"meta":{"line":168,"file":"command.ts","path":"src"}},{"name":"reload","description":"Reloads the command.","returns":[[["void"]]],"meta":{"line":197,"file":"command.ts","path":"src"}},{"name":"run","description":"Runs the command.","params":[{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["string"," | "],["MessageOptions"," | "],["void",">"]]],"meta":{"line":213,"file":"command.ts","path":"src"}},{"name":"throttle","description":"Creates/obtains the throttle object for a user, if necessary.","access":"private","params":[{"name":"userID","description":"ID of the user to throttle for","type":[[["string"]]]}],"returns":[[["ThrottleObject"," | "],["null"]]],"meta":{"line":178,"file":"command.ts","path":"src"}},{"name":"unload","description":"Unloads the command.","returns":[[["void"]]],"meta":{"line":204,"file":"command.ts","path":"src"}},{"name":"validateOptions","description":"Validates {@link SlashCommandOptions}.","scope":"static","access":"private","params":[{"name":"opts","type":[[["SlashCommandOptions"]]]}],"returns":[[["void"]]],"meta":{"line":234,"file":"command.ts","path":"src"}}],"meta":{"line":42,"file":"command.ts","path":"src"}},{"name":"CommandContext","description":"Context representing a command interaction.","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]},{"name":"data","description":"The interaction data for the context.","type":[[["InteractionRequestData"]]]},{"name":"respond","description":"The response function for the interaction.","type":[[["RespondFunction"]]]},{"name":"webserverMode","description":"Whether the interaction was from a webserver.","type":[[["boolean"]]]},{"name":"deferEphemeral","description":"Whether the context should auto-defer ephemeral messages.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["CommandContext"]]],"meta":{"line":111,"file":"context.ts","path":"src"}},"props":[{"name":"_respond","description":"The initial response function.","access":"private","type":[[["RespondFunction"]]],"meta":{"line":109,"file":"context.ts","path":"src"}},{"name":"_timeout","description":"The timeout for the auto-response.","access":"private","type":[[["any"]]],"meta":{"line":111,"file":"context.ts","path":"src"}},{"name":"channelID","description":"The channel ID that the command was invoked in.","readonly":true,"type":[[["string"]]],"meta":{"line":74,"file":"context.ts","path":"src"}},{"name":"channels","description":"The resolved channels of the interaction.","readonly":true,"default":"new Collection<string, Channel>()","type":[[["Collection","<"],["string",", "],["Channel",">"]]],"meta":{"line":104,"file":"context.ts","path":"src"}},{"name":"commandID","description":"The command's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":85,"file":"context.ts","path":"src"}},{"name":"commandName","description":"The command's name.","readonly":true,"type":[[["string"]]],"meta":{"line":83,"file":"context.ts","path":"src"}},{"name":"creator","description":"The creator of the command.","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":66,"file":"context.ts","path":"src"}},{"name":"data","description":"The full interaction data.","readonly":true,"type":[[["InteractionRequestData"]]],"meta":{"line":68,"file":"context.ts","path":"src"}},{"name":"deferred","description":"Whether there is a deferred message available.","default":"false","type":[[["boolean"]]],"meta":{"line":95,"file":"context.ts","path":"src"}},{"name":"guildID","description":"The guild ID that the command was invoked in.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":76,"file":"context.ts","path":"src"}},{"name":"initiallyResponded","description":"Whether the initial response was sent.","default":"false","type":[[["boolean"]]],"meta":{"line":93,"file":"context.ts","path":"src"}},{"name":"interactionID","description":"The interaction's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":72,"file":"context.ts","path":"src"}},{"name":"interactionToken","description":"The interaction's token.","readonly":true,"type":[[["string"]]],"meta":{"line":70,"file":"context.ts","path":"src"}},{"name":"invokedAt","description":"The time when the context was created.","readonly":true,"default":"Date.now()","type":[[["number"]]],"meta":{"line":91,"file":"context.ts","path":"src"}},{"name":"member","description":"The member that invoked the command.","readonly":true,"type":[[["Member"]]],"meta":{"line":78,"file":"context.ts","path":"src"}},{"name":"members","description":"The resolved members of the interaction.","readonly":true,"default":"new Collection<string, ResolvedMember>()","type":[[["Collection","<"],["string",", "],["ResolvedMember",">"]]],"meta":{"line":100,"file":"context.ts","path":"src"}},{"name":"options","description":"The options given to the command.","readonly":true,"type":[[["{}"]]],"meta":{"line":87,"file":"context.ts","path":"src"}},{"name":"roles","description":"The resolved roles of the interaction.","readonly":true,"default":"new Collection<string, Role>()","type":[[["Collection","<"],["string",", "],["Role",">"]]],"meta":{"line":102,"file":"context.ts","path":"src"}},{"name":"subcommands","description":"The subcommands the member used in order.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":89,"file":"context.ts","path":"src"}},{"name":"user","description":"The user that invoked the command.","readonly":true,"type":[[["User"]]],"meta":{"line":80,"file":"context.ts","path":"src"}},{"name":"users","description":"The resolved users of the interaction.","readonly":true,"default":"new Collection<string, User>()","type":[[["Collection","<"],["string",", "],["User",">"]]],"meta":{"line":98,"file":"context.ts","path":"src"}},{"name":"webserverMode","description":"Whether the context is from a webserver.","access":"private","type":[[["boolean"]]],"meta":{"line":107,"file":"context.ts","path":"src"}},{"name":"expired","description":"Whether the interaction has expired. Interactions last 15 minutes.","readonly":true,"type":[[["boolean"]]],"meta":{"line":171,"file":"context.ts","path":"src"}}],"methods":[{"name":"defer","description":"Creates a deferred message. To users, this will show as\n\"Bot is thinking...\" until the deferred message is edited.","params":[{"name":"ephemeral","description":"Whether to make the deferred message ephemeral.","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["boolean",">"]]],"returnsDescription":"Whether the deferred message passed\n","meta":{"line":331,"file":"context.ts","path":"src"}},{"name":"delete","description":"Deletes a message. If the message ID was not defined, the original message is used.","params":[{"name":"messageID","description":"The message's ID","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":316,"file":"context.ts","path":"src"}},{"name":"edit","description":"Edits a message.","params":[{"name":"messageID","description":"The message's ID","type":[[["string"]]]},{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":265,"file":"context.ts","path":"src"}},{"name":"editOriginal","description":"Edits the original message.\nThis is put on a timeout of 150 ms for webservers to account for\nDiscord recieving and processing the original response.\nNote: This will error with ephemeral messages or deferred ephemeral messages.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":304,"file":"context.ts","path":"src"}},{"name":"send","description":"Sends a message, if it already made an initial response, this will create a follow-up message.\nIF the context has created a deferred message, it will edit that deferred message,\nand future calls to this function create follow ups.\nThis will return a boolean if it's an initial response, otherwise a {@link Message} will be returned.\nNote that when making a follow-up message, the `ephemeral` option is ignored.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["MessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["MessageOptions"]]]}],"returns":[[["Promise","<"],["boolean"," | "],["Message",">"]]],"meta":{"line":184,"file":"context.ts","path":"src"}},{"name":"sendFollowUp","description":"Sends a follow-up message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["FollowUpMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["FollowUpMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":228,"file":"context.ts","path":"src"}},{"name":"convertOptions","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["{}"]]],"meta":{"line":352,"file":"context.ts","path":"src"}},{"name":"getSubcommandArray","scope":"static","access":"private","params":[{"name":"options","type":[[["Array","<"],["AnyCommandOption",">"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":363,"file":"context.ts","path":"src"}}],"meta":{"line":64,"file":"context.ts","path":"src"}},{"name":"SlashCreator","description":"The main class for using commands and interactions.","extends":["TypedEventEmitter"],"construct":{"name":"constructor","params":[{"name":"opts","description":"The options for the creator","type":[[["SlashCreatorOptions"]]]}],"returns":[[["SlashCreator"]]],"meta":{"line":123,"file":"creator.ts","path":"src"}},"props":[{"name":"allowedMentions","description":"The formatted allowed mentions from the options","readonly":true,"type":[[["FormattedAllowedMentions"]]],"meta":{"line":121,"file":"creator.ts","path":"src"}},{"name":"api","description":"The API handler for the creator","readonly":true,"default":"new SlashCreatorAPI(this)","type":[[["SlashCreatorAPI"]]],"meta":{"line":110,"file":"creator.ts","path":"src"}},{"name":"commands","description":"The commands loaded onto the creator","readonly":true,"default":"new Collection<string, SlashCommand>()","type":[[["Collection","<"],["string",", "],["SlashCommand",">"]]],"meta":{"line":112,"file":"creator.ts","path":"src"}},{"name":"commandsPath","description":"The path where the commands were loaded from","see":["#registerCommandsIn\n"],"type":[[["undefined"," | "],["string"]]],"meta":{"line":117,"file":"creator.ts","path":"src"}},{"name":"options","description":"The options from constructing the creator","type":[[["SlashCreatorOptions"]]],"meta":{"line":106,"file":"creator.ts","path":"src"}},{"name":"requestHandler","description":"The request handler for the creator","readonly":true,"type":[[["RequestHandler"]]],"meta":{"line":108,"file":"creator.ts","path":"src"}},{"name":"server","description":"The server being used in the creator","type":[[["Server"]]],"meta":{"line":119,"file":"creator.ts","path":"src"}},{"name":"unknownCommand","description":"The command to run when an unknown command is used.","type":[[["SlashCommand"]]],"meta":{"line":123,"file":"creator.ts","path":"src"}}],"methods":[{"name":"_createGatewayRespond","access":"private","params":[{"name":"interactionID","type":[[["string"]]]},{"name":"token","type":[[["string"]]]}],"returns":[[["RespondFunction"]]],"meta":{"line":613,"file":"creator.ts","path":"src"}},{"name":"_getCommandFromInteraction","access":"private","params":[{"name":"interaction","type":[[["InteractionRequestData"]]]}],"returns":[[["undefined"," | "],["SlashCommand"]]],"meta":{"line":457,"file":"creator.ts","path":"src"}},{"name":"_onInteraction","access":"private","params":[{"name":"interaction","type":[[["AnyRequestData"]]]},{"name":"respond","type":[[["RespondFunction"," | "],["null"]]]},{"name":"webserverMode","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":502,"file":"creator.ts","path":"src"}},{"name":"_onRequest","access":"private","params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":470,"file":"creator.ts","path":"src"}},{"name":"_runCommand","access":"private","params":[{"name":"command","type":[[["SlashCommand"]]]},{"name":"ctx","type":[[["CommandContext"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":591,"file":"creator.ts","path":"src"}},{"name":"registerCommand","description":"Registers a single command","see":["SlashCreator#registerCommands\n"],"examples":[],"emits":[],"params":[{"name":"command","description":"Either a Command instance, or a constructor for one","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":167,"file":"creator.ts","path":"src"}},{"name":"registerCommands","description":"Registers multiple commands","params":[{"name":"commands","description":"An array of Command instances or constructors","type":[[["Array","<"],["any",">"]]]},{"name":"ignoreInvalid","description":"Whether to skip over invalid objects without throwing an error","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["this"]]],"meta":{"line":205,"file":"creator.ts","path":"src"}},{"name":"registerCommandsIn","description":"Registers all commands in a directory. The files must export a Command class constructor or instance.","see":[],"examples":["\nconst path = require('path');\ncreator.registerCommandsIn(path.join(__dirname, 'commands'));\n"],"emits":[],"params":[{"name":"options","description":"The path to the directory, or a require-all options object","type":[[["RequireAllOptions"," | "],["string"]]]}],"returns":[[["this"]]],"meta":{"line":229,"file":"creator.ts","path":"src"}},{"name":"reregisterCommand","description":"Reregisters a command. (does not support changing name, or guild IDs)","params":[{"name":"command","description":"New command","type":[[["any"]]]},{"name":"oldCommand","description":"Old command","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":249,"file":"creator.ts","path":"src"}},{"name":"startServer","description":"Starts the server, if one was defined.","returns":[[["Promise","<"],["void",">"]]],"meta":{"line":297,"file":"creator.ts","path":"src"}},{"name":"syncCommands","description":"Sync all commands with Discord. This ensures that commands exist when handling them.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"opts","optional":true,"type":[[["SyncCommandOptions"]]]}],"returns":[[["this"]]],"meta":{"line":308,"file":"creator.ts","path":"src"}},{"name":"syncCommandsIn","description":"Sync guild commands.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"guildID","description":"The guild to sync","type":[[["string"]]]},{"name":"deleteCommands","description":"Whether to delete command not found in the creator","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":359,"file":"creator.ts","path":"src"}},{"name":"syncGlobalCommands","description":"Sync global commands.\n<warn>This requires you to have your token set in the creator config.</warn>","params":[{"name":"deleteCommands","description":"Whether to delete command not found in the creator","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":415,"file":"creator.ts","path":"src"}},{"name":"unregisterCommand","description":"Unregisters a command.","params":[{"name":"command","description":"Command to unregister","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":273,"file":"creator.ts","path":"src"}},{"name":"withServer","description":"Attaches a server to the creator.","params":[{"name":"server","description":"The server to use","type":[[["Server"]]]}],"returns":[[["this"]]],"meta":{"line":284,"file":"creator.ts","path":"src"}}],"events":[{"name":"commandBlock","description":"Emitted when a command is blocked.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was blocked","type":[[["SlashCommand"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]},{"name":"reason","description":"Reason that the command was blocked","type":[[["string"]]]},{"name":"data","description":"Additional data associated with the block.","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":471,"file":"constants.ts","path":"src"}},{"name":"commandError","description":"Emitted when a command gave an error.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that gave an error","type":[[["SlashCommand"]]]},{"name":"err","description":"The error given","type":[[["Error"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":480,"file":"constants.ts","path":"src"}},{"name":"commandRegister","description":"Emitted when a command is registered.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was registered","type":[[["SlashCommand"]]]},{"name":"creator","description":"Creator that the command was registered to","type":[[["SlashCreator"]]]}],"returns":[[["void"]]],"meta":{"line":446,"file":"constants.ts","path":"src"}},{"name":"commandReregister","description":"Emitted when a command is reregistered","see":[],"examples":[],"emits":[],"params":[{"name":"command","type":[[["SlashCommand"]]]},{"name":"oldCommand","description":"Old command","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":461,"file":"constants.ts","path":"src"}},{"name":"commandRun","description":"Emitted when a command is ran.","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was ran","type":[[["SlashCommand"]]]},{"name":"promise","description":"Promise for the command result","type":[[["Promise","<"],["any",">"]]]},{"name":"ctx","description":"The context of the interaction","type":[[["CommandContext"]]]}],"returns":[[["void"]]],"meta":{"line":489,"file":"constants.ts","path":"src"}},{"name":"commandUnregister","description":"Emitted when a command is unregistered","see":[],"examples":[],"emits":[],"params":[{"name":"command","description":"Command that was unregistered","type":[[["SlashCommand"]]]}],"returns":[[["void"]]],"meta":{"line":453,"file":"constants.ts","path":"src"}},{"name":"debug","description":"Emitted when a debug message is given.","see":[],"examples":[],"emits":[],"params":[{"name":"message","description":"The debug message","type":[[["string"]]]}],"returns":[[["void"]]],"meta":{"line":417,"file":"constants.ts","path":"src"}},{"name":"error","description":"Emitted when an error occurred","see":[],"examples":[],"emits":[],"params":[{"name":"err","description":"The error thrown","type":[[["Error"]]]}],"returns":[[["void"]]],"meta":{"line":424,"file":"constants.ts","path":"src"}},{"name":"ping","description":"Emitted when Discord pings the interaction endpoint.","see":[],"examples":[],"emits":[],"params":[{"name":"user","description":"The user that requested the ping","optional":true,"type":[[["CommandUser"]]]}],"returns":[[["void"]]],"meta":{"line":390,"file":"constants.ts","path":"src"}},{"name":"rawREST","description":"Emitted when the Client's RequestHandler receives a response.","see":[],"examples":[],"emits":[],"params":[{"name":"request","description":"The data for the request","type":[[["RawRequest"]]]}],"returns":[[["void"]]],"meta":{"line":403,"file":"constants.ts","path":"src"}},{"name":"synced","description":"Emitted when the creator successfully synced commands.","see":[],"examples":[],"emits":[],"returns":[[["void"]]],"meta":{"line":396,"file":"constants.ts","path":"src"}},{"name":"unknownInteraction","description":"Emitted when an unknown interaction type is encountered.","see":[],"examples":[],"emits":[],"params":[{"name":"interaction","description":"The unhandled interaction","type":[[["any"]]]}],"returns":[[["void"]]],"meta":{"line":438,"file":"constants.ts","path":"src"}},{"name":"unverifiedRequest","description":"Emitted when a request failed to be verified.","see":[],"examples":[],"emits":[],"params":[{"name":"treq","description":"The unverified request","type":[[["TransformedRequest"]]]}],"returns":[[["void"]]],"meta":{"line":431,"file":"constants.ts","path":"src"}},{"name":"warn","description":"Emitted when a warning is given.","see":[],"examples":[],"emits":[],"params":[{"name":"warning","description":"The warning","type":[[["Error"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":410,"file":"constants.ts","path":"src"}}],"meta":{"line":104,"file":"creator.ts","path":"src"}},{"name":"DiscordHTTPError","description":"An HTTP error from a request.","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","description":"A client request","type":[[["ClientRequest"]]]},{"name":"res","description":"An incoming message from the server","type":[[["IncomingMessage"]]]},{"name":"response","description":"Any {@link Server}s response class","type":[[["any"]]]},{"name":"stack","description":"The error stack","type":[[["string"]]]}],"returns":[[["DiscordHTTPError"]]],"meta":{"line":16,"file":"DiscordHTTPError.ts","path":"src/errors"}},"props":[{"name":"code","description":"The status code from the response.","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"message","description":"The response message.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"req","description":"The client request of the error.","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":6,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"res","description":"The response from the server.","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":8,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"response","description":"The response class from a {@link Server}.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"stack","description":"The error stack.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":45,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","access":"private","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","optional":true,"default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":49,"file":"DiscordHTTPError.ts","path":"src/errors"}}],"meta":{"line":4,"file":"DiscordHTTPError.ts","path":"src/errors"}},{"name":"DiscordRESTError","description":"An Discord error from a request.","extends":["Error"],"construct":{"name":"constructor","params":[{"name":"req","description":"A client request","type":[[["ClientRequest"]]]},{"name":"res","description":"An incoming message from the server","type":[[["IncomingMessage"]]]},{"name":"response","description":"Any {@link Server}s response class","type":[[["any"]]]},{"name":"stack","description":"The error stack","type":[[["string"]]]}],"returns":[[["DiscordRESTError"]]],"meta":{"line":16,"file":"DiscordRESTError.ts","path":"src/errors"}},"props":[{"name":"code","description":"The error code from the response.","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"message","description":"The message of the error.","readonly":true,"type":[[["string"]]],"meta":{"line":14,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"req","description":"The client request of the error.","readonly":true,"type":[[["ClientRequest"]]],"meta":{"line":6,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"res","description":"The response from the server.","readonly":true,"type":[[["IncomingMessage"]]],"meta":{"line":8,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"response","description":"The response class from a {@link Server}.","readonly":true,"type":[[["any"]]],"meta":{"line":10,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"stack","description":"The error stack.","readonly":true,"type":[[["string"]]],"meta":{"line":16,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Error","scope":"static","type":[[["ErrorConstructor"]]],"meta":{"line":984,"file":"lib.es5.d.ts","path":"node_modules/typescript/lib"}},{"name":"name","readonly":true,"type":[[["string"]]],"meta":{"line":48,"file":"DiscordRESTError.ts","path":"src/errors"}}],"methods":[{"name":"flattenErrors","access":"private","params":[{"name":"errors","type":[[["any"]]]},{"name":"keyPrefix","optional":true,"default":"\"\"","type":[[["string"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":52,"file":"DiscordRESTError.ts","path":"src/errors"}}],"meta":{"line":4,"file":"DiscordRESTError.ts","path":"src/errors"}},{"name":"Server","description":"The base Server for {@link SlashCreator}.","access":"private","construct":{"name":"constructor","params":[{"name":"opts","description":"The server options","optional":true,"default":"{ alreadyListening: false }","type":[[["ServerOptions"]]]},{"name":"isWebserver","description":"Whether this server is a webserver","optional":true,"default":"true","type":[[["boolean"]]]}],"returns":[[["Server"]]],"meta":{"line":62,"file":"server.ts","path":"src"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"server.ts","path":"src"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":58,"file":"server.ts","path":"src"}},{"name":"ExpressServer","description":"A server for Express applications.","see":["http://expressjs.com\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The express application. Must have express.json installed as a middleware.","optional":true,"type":[[["Express","."],["Application"]]]},{"name":"opts","description":"The server options","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["ExpressServer"]]],"meta":{"line":15,"file":"express.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"app","access":"private","readonly":true,"type":[[["Express","."],["Application"]]],"meta":{"line":15,"file":"express.ts","path":"src/servers"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Express server.","params":[{"name":"middleware","description":"The middleware to add.","type":[[["Express","."],["RequestHandler"]]]}],"returns":[[["this"]]],"meta":{"line":35,"file":"express.ts","path":"src/servers"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":57,"file":"express.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":76,"file":"express.ts","path":"src/servers"}},{"name":"set","description":"Sets an Express setting.","see":["http://expressjs.com/en/4x/api.html#app.settings.table\n"],"examples":[],"emits":[],"params":[{"name":"setting","description":"Express setting string","type":[[["string"]]]},{"name":"value","description":"The value to set the setting to","type":[[["any"]]]}],"returns":[[["this"]]],"meta":{"line":51,"file":"express.ts","path":"src/servers"}},{"name":"use","description":"Alias for {@link ExpressServer#addMiddleware}","params":[{"name":"middleware","type":[[["Express","."],["RequestHandler"]]]}],"returns":[[["this"]]],"meta":{"line":41,"file":"express.ts","path":"src/servers"}}],"meta":{"line":14,"file":"express.ts","path":"src/servers"}},{"name":"FastifyServer","description":"A server for Fastify applications.","see":["https://fastify.io\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"app","description":"The fastify application, or the options for initialization","optional":true,"type":[[["FastifyInstance"," | "],["FastifyOptions"]]]},{"name":"opts","description":"The server options","optional":true,"type":[[["ServerOptions"]]]}],"returns":[[["FastifyServer"]]],"meta":{"line":22,"file":"fastify.ts","path":"src/servers"}},"props":[{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"app","access":"private","readonly":true,"type":[[["FastifyInstance"]]],"meta":{"line":22,"file":"fastify.ts","path":"src/servers"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","description":"Adds middleware to the Fastify server.\n<warn>This requires you to have the 'middie' module registered to the server before using.</warn>","see":["https://www.fastify.io/docs/latest/Middleware/\n"],"examples":[],"emits":[],"params":[{"name":"middleware","description":"The middleware to add.","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":45,"file":"fastify.ts","path":"src/servers"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":61,"file":"fastify.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":80,"file":"fastify.ts","path":"src/servers"}},{"name":"use","description":"Alias for {@link FastifyServer#addMiddleware}","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["this"]]],"meta":{"line":56,"file":"fastify.ts","path":"src/servers"}}],"meta":{"line":21,"file":"fastify.ts","path":"src/servers"}},{"name":"GatewayServer","description":"A \"server\" for gateway connections to pipe events into.","extends":["Server"],"construct":{"name":"constructor","params":[{"name":"eventHandler","description":"A function that is used to handle the event for gateway interactions.","type":[[["EventHandler"]]]}],"returns":[[["GatewayServer"]]],"meta":{"line":8,"file":"gateway.ts","path":"src/servers"}},"props":[{"name":"_eventHandler","access":"private","readonly":true,"type":[[["EventHandler"]]],"meta":{"line":8,"file":"gateway.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":81,"file":"server.ts","path":"src"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":17,"file":"gateway.ts","path":"src/servers"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":7,"file":"gateway.ts","path":"src/servers"}},{"name":"GCFServer","description":"A server for Google Cloud Functions.","see":["https://cloud.google.com/functions/\n"],"extends":["Server"],"construct":{"name":"constructor","params":[{"name":"moduleExports","description":"The exports for your module, must be `module.exports`","type":[[["any"]]]},{"name":"target","description":"The name of the exported function","optional":true,"default":"\"interactions\"","type":[[["string"]]]}],"returns":[[["GCFServer"]]],"meta":{"line":10,"file":"gcf.ts","path":"src/servers"}},"props":[{"name":"_handler","access":"private","type":[[["RequestHandler"]]],"meta":{"line":10,"file":"gcf.ts","path":"src/servers"}},{"name":"alreadyListening","description":"Whether this server is already listening to a port.","type":[[["boolean"]]],"meta":{"line":60,"file":"server.ts","path":"src"}},{"name":"isWebserver","description":"Whether this server is a webserver.","type":[[["boolean"]]],"meta":{"line":62,"file":"server.ts","path":"src"}}],"methods":[{"name":"_onRequest","access":"private","params":[{"name":"req","type":[[["Express","."],["Request"]]]},{"name":"res","type":[[["Express","."],["Response"]]]}],"returns":[[["undefined"," | "],["Response","<"],["any",", "],["Record","<"],["string",", "],["any",">>"]]],"meta":{"line":21,"file":"gcf.ts","path":"src/servers"}},{"name":"addMiddleware","access":"private","params":[{"name":"middleware","type":[[["Function"]]]}],"returns":[[["void"]]],"meta":{"line":76,"file":"server.ts","path":"src"}},{"name":"createEndpoint","access":"private","params":[{"name":"path","type":[[["string"]]]},{"name":"handler","type":[[["RequestHandler"]]]}],"returns":[[["void"]]],"meta":{"line":40,"file":"gcf.ts","path":"src/servers"}},{"name":"handleInteraction","access":"private","params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]],"meta":{"line":86,"file":"server.ts","path":"src"}},{"name":"listen","access":"private","params":[{"name":"port","optional":true,"default":"8030","type":[[["number"]]]},{"name":"host","optional":true,"default":"\"localhost\"","type":[[["string"]]]}],"returns":[[["Promise","<"],["void",">"]]],"meta":{"line":91,"file":"server.ts","path":"src"}}],"meta":{"line":9,"file":"gcf.ts","path":"src/servers"}},{"name":"Channel","description":"Represents a resolved channel object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedChannel"]]]}],"returns":[[["Channel"]]],"meta":{"line":15,"file":"channel.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"channel.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":14,"file":"channel.ts","path":"src/structures"}},{"name":"id","description":"The channel's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"channel.ts","path":"src/structures"}},{"name":"name","description":"The channel's name","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"channel.ts","path":"src/structures"}},{"name":"type","description":"The channel's type","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"channel.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this channel.","readonly":true,"type":[[["string"]]],"meta":{"line":30,"file":"channel.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":35,"file":"channel.ts","path":"src/structures"}}],"meta":{"line":6,"file":"channel.ts","path":"src/structures"}},{"name":"Member","description":"Represents a Discord guild member.","extends":["ResolvedMember"],"construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["CommandMember"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["Member"]]],"meta":{"line":15,"file":"member.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":15,"file":"member.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":14,"file":"member.ts","path":"src/structures"}},{"name":"deaf","description":"Whether the user is deafened in voice channels","readonly":true,"type":[[["boolean"]]],"meta":{"line":12,"file":"member.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mute","description":"Whether the user is muted in voice channels","readonly":true,"type":[[["boolean"]]],"meta":{"line":10,"file":"member.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":10,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"pending","description":"Whether the member is pending verification","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":16,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":14,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","readonly":true,"type":[[["User"]]],"meta":{"line":20,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"displayName","description":"The display name for this member.","readonly":true,"type":[[["string"]]],"meta":{"line":54,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this member.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":29,"file":"member.ts","path":"src/structures"}}],"meta":{"line":8,"file":"member.ts","path":"src/structures"}},{"name":"Message","description":"Represents a Discord message.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the message","type":[[["MessageData"]]]},{"name":"ctx","description":"The instantiating context","type":[[["CommandContext"]]]}],"returns":[[["Message"]]],"meta":{"line":59,"file":"message.ts","path":"src/structures"}},"props":[{"name":"_ctx","description":"The context that created the message class","access":"private","readonly":true,"type":[[["CommandContext"]]],"meta":{"line":59,"file":"message.ts","path":"src/structures"}},{"name":"attachments","description":"The message's attachments","readonly":true,"type":[[["Array","<"],["any",">"]]],"meta":{"line":38,"file":"message.ts","path":"src/structures"}},{"name":"author","description":"The author of the message","readonly":true,"type":[[["User"]]],"meta":{"line":36,"file":"message.ts","path":"src/structures"}},{"name":"channelID","description":"The ID of the channel the message is in","readonly":true,"type":[[["string"]]],"meta":{"line":34,"file":"message.ts","path":"src/structures"}},{"name":"content","description":"The content of the message","readonly":true,"type":[[["string"]]],"meta":{"line":32,"file":"message.ts","path":"src/structures"}},{"name":"editedTimestamp","description":"The timestamp of when the message was last edited","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":52,"file":"message.ts","path":"src/structures"}},{"name":"embeds","description":"The message's embeds","readonly":true,"type":[[["Array","<"],["any",">"]]],"meta":{"line":40,"file":"message.ts","path":"src/structures"}},{"name":"flags","description":"The message's flags","readonly":true,"type":[[["number"]]],"meta":{"line":54,"file":"message.ts","path":"src/structures"}},{"name":"id","description":"The message's ID","readonly":true,"type":[[["string"]]],"meta":{"line":28,"file":"message.ts","path":"src/structures"}},{"name":"mentionedEveryone","description":"Whether the message mentioned everyone/here","readonly":true,"type":[[["boolean"]]],"meta":{"line":46,"file":"message.ts","path":"src/structures"}},{"name":"mentions","description":"The message's user mentions","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":42,"file":"message.ts","path":"src/structures"}},{"name":"roleMentions","description":"The message's role mentions","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":44,"file":"message.ts","path":"src/structures"}},{"name":"timestamp","description":"The timestamp of the message","readonly":true,"type":[[["number"]]],"meta":{"line":50,"file":"message.ts","path":"src/structures"}},{"name":"tts","description":"Whether the message used TTS","readonly":true,"type":[[["boolean"]]],"meta":{"line":48,"file":"message.ts","path":"src/structures"}},{"name":"type","description":"The message type","readonly":true,"type":[[["number"]]],"meta":{"line":30,"file":"message.ts","path":"src/structures"}},{"name":"webhookID","description":"The message's webhook ID","readonly":true,"type":[[["string"]]],"meta":{"line":56,"file":"message.ts","path":"src/structures"}}],"methods":[{"name":"delete","description":"Deletes this message.","returns":[[["Promise","<"],["any",">"]]],"meta":{"line":95,"file":"message.ts","path":"src/structures"}},{"name":"edit","description":"Edits this message.","params":[{"name":"content","description":"The content of the message","type":[[["string"," | "],["EditMessageOptions"]]]},{"name":"options","description":"The message options","optional":true,"type":[[["EditMessageOptions"]]]}],"returns":[[["Promise","<"],["Message",">"]]],"meta":{"line":90,"file":"message.ts","path":"src/structures"}}],"meta":{"line":26,"file":"message.ts","path":"src/structures"}},{"name":"Permissions","description":"Data structure that makes it easy to interact with a permission bitfield.\nAll {@link Member}s have a set of permissions.","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["Permissions"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"Permission flags. Check the source of this property for available permissions.","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":43,"file":"permissions.ts","path":"src/structures"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":18,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":56,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":66,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":106,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":41,"file":"permissions.ts","path":"src/structures"}},{"name":"ResolvedMember","description":"Represents a resolved member object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedMemberData"]]]},{"name":"userData","description":"The data for the member's user","type":[[["CommandUser"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["ResolvedMember"]]],"meta":{"line":23,"file":"resolvedMember.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the member class.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":23,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"id","description":"The member's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"joinedAt","description":"The timestamp the member joined the guild","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"nick","description":"The member's nickname","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":10,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"pending","description":"Whether the member is pending verification","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"premiumSince","description":"The time of when this member boosted the server.","readonly":true,"type":[[["undefined"," | "],["number"]]],"meta":{"line":16,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"roles","description":"An array of role IDs that the user has.","readonly":true,"type":[[["Array","<"],["string",">"]]],"meta":{"line":14,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"user","description":"The user object for this member","readonly":true,"type":[[["User"]]],"meta":{"line":20,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"displayName","description":"The display name for this member.","readonly":true,"type":[[["string"]]],"meta":{"line":54,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this member.","readonly":true,"type":[[["string"]]],"meta":{"line":44,"file":"resolvedMember.ts","path":"src/structures"}}],"meta":{"line":6,"file":"resolvedMember.ts","path":"src/structures"}},{"name":"Role","description":"Represents a resolved role object.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the member","type":[[["ResolvedRole"]]]}],"returns":[[["Role"]]],"meta":{"line":23,"file":"role.ts","path":"src/structures"}},"props":[{"name":"_permissions","access":"private","type":[[["string"]]],"meta":{"line":23,"file":"role.ts","path":"src/structures"}},{"name":"_permissionsBitfield","access":"private","type":[[["Permissions"]]],"meta":{"line":22,"file":"role.ts","path":"src/structures"}},{"name":"color","description":"The role's color integer","readonly":true,"type":[[["number"]]],"meta":{"line":14,"file":"role.ts","path":"src/structures"}},{"name":"hoist","description":"Whether the role is being hoisted","readonly":true,"type":[[["boolean"]]],"meta":{"line":16,"file":"role.ts","path":"src/structures"}},{"name":"id","description":"The role's ID","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"role.ts","path":"src/structures"}},{"name":"managed","description":"Whether the role is being managed by an application","readonly":true,"type":[[["boolean"]]],"meta":{"line":18,"file":"role.ts","path":"src/structures"}},{"name":"mentionable","description":"Whether the role is mentionable by everyone","readonly":true,"type":[[["boolean"]]],"meta":{"line":20,"file":"role.ts","path":"src/structures"}},{"name":"name","description":"The role's name","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"role.ts","path":"src/structures"}},{"name":"position","description":"The role's position","readonly":true,"type":[[["number"]]],"meta":{"line":12,"file":"role.ts","path":"src/structures"}},{"name":"colorHex","description":"The role's color in hexadecimal, with a leading hashtag","readonly":true,"type":[[["string"]]],"meta":{"line":45,"file":"role.ts","path":"src/structures"}},{"name":"mention","description":"The string that mentions this role.","readonly":true,"type":[[["string"]]],"meta":{"line":40,"file":"role.ts","path":"src/structures"}},{"name":"permissions","description":"The permissions the member has.","readonly":true,"type":[[["Permissions"]]],"meta":{"line":50,"file":"role.ts","path":"src/structures"}}],"meta":{"line":6,"file":"role.ts","path":"src/structures"}},{"name":"User","description":"Represents a user on Discord.","construct":{"name":"constructor","params":[{"name":"data","description":"The data for the user","type":[[["UserObject"]]]},{"name":"creator","description":"The instantiating creator","type":[[["SlashCreator"]]]}],"returns":[[["User"]]],"meta":{"line":22,"file":"user.ts","path":"src/structures"}},"props":[{"name":"_creator","description":"The creator of the user class.","access":"private","readonly":true,"type":[[["SlashCreator"]]],"meta":{"line":19,"file":"user.ts","path":"src/structures"}},{"name":"_flags","access":"private","type":[[["number"]]],"meta":{"line":22,"file":"user.ts","path":"src/structures"}},{"name":"_flagsBitfield","access":"private","type":[[["UserFlags"]]],"meta":{"line":21,"file":"user.ts","path":"src/structures"}},{"name":"avatar","description":"The user's avatar hash.","readonly":true,"type":[[["undefined"," | "],["string"]]],"meta":{"line":14,"file":"user.ts","path":"src/structures"}},{"name":"bot","description":"Whether the user is a bot.","readonly":true,"type":[[["boolean"]]],"meta":{"line":16,"file":"user.ts","path":"src/structures"}},{"name":"discriminator","description":"The user's discriminator.","readonly":true,"type":[[["string"]]],"meta":{"line":12,"file":"user.ts","path":"src/structures"}},{"name":"id","description":"The user's ID.","readonly":true,"type":[[["string"]]],"meta":{"line":8,"file":"user.ts","path":"src/structures"}},{"name":"username","description":"The user's username.","readonly":true,"type":[[["string"]]],"meta":{"line":10,"file":"user.ts","path":"src/structures"}},{"name":"avatarURL","description":"The URL of the user's avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":66,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatar","description":"The hash for the default avatar of a user if there is no avatar set.","readonly":true,"type":[[["number"]]],"meta":{"line":56,"file":"user.ts","path":"src/structures"}},{"name":"defaultAvatarURL","description":"The URL of the user's default avatar.","readonly":true,"type":[[["string"]]],"meta":{"line":61,"file":"user.ts","path":"src/structures"}},{"name":"flags","description":"The public flags for the user.","readonly":true,"type":[[["UserFlags"]]],"meta":{"line":40,"file":"user.ts","path":"src/structures"}},{"name":"mention","description":"A string that mentions the user.","readonly":true,"type":[[["string"]]],"meta":{"line":46,"file":"user.ts","path":"src/structures"}}],"methods":[{"name":"dynamicAvatarURL","description":"Get the user's avatar with the given format and size.","params":[{"name":"format","description":"The format of the avatar","optional":true,"type":[[["ImageFormat"]]]},{"name":"size","description":"The size of the avatar","optional":true,"type":[[["undefined"," | "],["number"]]]}],"returns":[[["string"]]],"meta":{"line":75,"file":"user.ts","path":"src/structures"}}],"meta":{"line":6,"file":"user.ts","path":"src/structures"}},{"name":"UserFlags","description":"Data structure that makes it easy to interact with a {@link User#flags} bitfield.","extends":["BitField"],"construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["UserFlags"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"The flags for users. Check the source of this property for available flags.","scope":"static","default":"FLAGS","type":[[["{}"]]],"meta":{"line":27,"file":"userFlags.ts","path":"src/structures"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":18,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":56,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":66,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":106,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":25,"file":"userFlags.ts","path":"src/structures"}},{"name":"BitField","description":"Data structure that makes it easy to interact with a bitfield.","construct":{"name":"constructor","params":[{"name":"bits","description":"Bit(s) to read from.","optional":true,"default":"0","type":[[["BitFieldResolvable"]]]}],"returns":[[["BitField"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},"props":[{"name":"bitfield","description":"Bitfield of the packed bits.","default":"0","type":[[["number"," | "],["bigint"]]],"meta":{"line":7,"file":"bitfield.ts","path":"src/util"}},{"name":"FLAGS","description":"The flags for this bitfield.","scope":"static","type":[[["{}"]]],"meta":{"line":9,"file":"bitfield.ts","path":"src/util"}},{"name":"defaultBit","access":"private","readonly":true,"type":[[["0"," | "],["0n"]]],"meta":{"line":18,"file":"bitfield.ts","path":"src/util"}}],"methods":[{"name":"any","description":"Checks whether the bitfield has a bit, or any of multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":26,"file":"bitfield.ts","path":"src/util"}},{"name":"equals","description":"Checks if this bitfield equals another.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":35,"file":"bitfield.ts","path":"src/util"}},{"name":"has","description":"Checks whether the bitfield has a bit, or multiple bits.","params":[{"name":"bit","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["boolean"]]],"meta":{"line":44,"file":"bitfield.ts","path":"src/util"}},{"name":"missing","description":"Gets all given bits that are missing from the bitfield.","params":[{"name":"bits","description":"Bit(s) to check for","type":[[["BitFieldResolvable"]]]}],"returns":[[["Array","<"],["string",">"]]],"meta":{"line":56,"file":"bitfield.ts","path":"src/util"}},{"name":"serialize","description":"Gets an object mapping field names to a {@link boolean} indicating whether the\nbit is available.","returns":[[["{}"]]],"meta":{"line":66,"file":"bitfield.ts","path":"src/util"}},{"name":"toArray","description":"Gets an {@link Array} of bitfield names based on the bits available.","returns":[[["Array","<"],["string",">"]]],"meta":{"line":77,"file":"bitfield.ts","path":"src/util"}},{"name":"resolve","description":"Resolves bitfields to their numeric form.","scope":"static","params":[{"name":"bit","description":"Bit(s) to resolve","optional":true,"type":[[["BitFieldResolvable"]]]}],"returns":[[["number"," | "],["bigint"]]],"meta":{"line":106,"file":"bitfield.ts","path":"src/util"}}],"meta":{"line":5,"file":"bitfield.ts","path":"src/util"}},{"name":"MultipartData","props":[{"name":"boundary","default":"\"----------------SlashCreate\"","type":[[["string"]]],"meta":{"line":2,"file":"multipartData.ts","path":"src/util"}},{"name":"bufs","default":"[]","type":[[["Array","<"],["Buffer",">"]]],"meta":{"line":3,"file":"multipartData.ts","path":"src/util"}}],"methods":[{"name":"attach","params":[{"name":"fieldName","type":[[["string"]]]},{"name":"data","type":[[["any"]]]},{"name":"filename","optional":true,"type":[[["undefined"," | "],["string"]]]}],"returns":[[["void"]]],"meta":{"line":5,"file":"multipartData.ts","path":"src/util"}},{"name":"finish","returns":[[["Array","<"],["Buffer",">"]]],"meta":{"line":23,"file":"multipartData.ts","path":"src/util"}}],"meta":{"line":1,"file":"multipartData.ts","path":"src/util"}},{"name":"RequestHandler","description":"The request handler for REST requests.","access":"private","construct":{"name":"constructor","params":[{"name":"creator","description":"The instantiating creator.","type":[[["SlashCreator"]]]}],"returns":[[["RequestHandler"]]],"meta":{"line":47,"file":"requestHandler.ts","path":"src/util"}},"props":[{"name":"_creator","description":"The creator that initialized the handler.","access":"private","type":[[["SlashCreator"]]],"meta":{"line":47,"file":"requestHandler.ts","path":"src/util"}},{"name":"agent","description":"TheHTTP agent used in the request handler.","readonly":true,"type":[[["HTTPS","."],["Agent"]]],"meta":{"line":38,"file":"requestHandler.ts","path":"src/util"}},{"name":"baseURL","description":"The base URL for all requests.","readonly":true,"default":"API_BASE_URL","type":[[["string"]]],"meta":{"line":30,"file":"requestHandler.ts","path":"src/util"}},{"name":"globalBlock","description":"Whether the handler is globally blocked.","default":"false","type":[[["boolean"]]],"meta":{"line":42,"file":"requestHandler.ts","path":"src/util"}},{"name":"latencyRef","description":"The latency reference for the handler.","readonly":true,"type":[[["LatencyRef"]]],"meta":{"line":40,"file":"requestHandler.ts","path":"src/util"}},{"name":"ratelimits","description":"The ratelimits per route.","readonly":true,"type":[[["{}"]]],"meta":{"line":34,"file":"requestHandler.ts","path":"src/util"}},{"name":"readyQueue","description":"The request queue.","readonly":true,"default":"[]","type":[[["Array","<"],["any",">"]]],"meta":{"line":44,"file":"requestHandler.ts","path":"src/util"}},{"name":"requestTimeout","description":"The amount of time a request will timeout.","readonly":true,"type":[[["number"]]],"meta":{"line":36,"file":"requestHandler.ts","path":"src/util"}},{"name":"userAgent","description":"The user agent for all requests.","readonly":true,"default":"USER_AGENT","type":[[["string"]]],"meta":{"line":32,"file":"requestHandler.ts","path":"src/util"}}],"methods":[{"name":"globalUnblock","description":"Unblocks the request handler.","returns":[[["void"]]],"meta":{"line":65,"file":"requestHandler.ts","path":"src/util"}},{"name":"request","description":"Make an API request","params":[{"name":"method","description":"Uppercase HTTP method","type":[[["string"]]]},{"name":"url","description":"URL of the endpoint","type":[[["string"]]]},{"name":"auth","description":"Whether to add the Authorization header and token or not","optional":true,"default":"true","type":[[["boolean"]]]},{"name":"body","description":"Request payload","optional":true,"type":[[["any"]]]},{"name":"file","description":"The file(s) to send","optional":true,"type":[[["any"]]]},{"name":"_route","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"short","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["Promise","<"],["any",">"]]],"meta":{"line":80,"file":"requestHandler.ts","path":"src/util"}},{"name":"routefy","params":[{"name":"url","type":[[["string"]]]},{"name":"method","type":[[["string"]]]}],"returns":[[["string"]]],"meta":{"line":424,"file":"requestHandler.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":438,"file":"requestHandler.ts","path":"src/util"}}],"meta":{"line":28,"file":"requestHandler.ts","path":"src/util"}},{"name":"SequentialBucket","description":"Ratelimit requests and release in sequence.","access":"private","construct":{"name":"constructor","params":[{"name":"limit","description":"The max number of tokens the bucket can consume per interval","type":[[["number"]]]},{"name":"latencyRef","description":"The latency reference","optional":true,"default":"{ latency: 0 }","type":[[["MinimalLatencyRef"]]]}],"returns":[[["SequentialBucket"]]],"meta":{"line":28,"file":"sequentialBucket.ts","path":"src/util"}},"props":[{"name":"_queue","access":"private","default":"[]","type":[[["Array","<"],["CallbackFunction",">"]]],"meta":{"line":26,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"last","access":"private","type":[[["undefined"," | "],["number"]]],"meta":{"line":28,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"latencyRef","access":"private","type":[[["MinimalLatencyRef"]]],"meta":{"line":25,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"limit","description":"How many tokens the bucket can consume in the current interval.","type":[[["number"]]],"meta":{"line":17,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processing","description":"Whether the queue is being processed.","default":"false","type":[[["boolean"]]],"meta":{"line":19,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"processingTimeout","access":"private","type":[[["any"]]],"meta":{"line":27,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"remaining","description":"How many tokens the bucket has left in the current interval.","type":[[["number"]]],"meta":{"line":21,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"reset","description":"Timestamp of next reset.","default":"0","type":[[["number"]]],"meta":{"line":23,"file":"sequentialBucket.ts","path":"src/util"}}],"methods":[{"name":"check","description":"Checks the bucket and runs through the functions.","params":[{"name":"override","description":"Whether to override the processing property","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":43,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"queue","description":"Queue something in the SequentialBucket","params":[{"name":"func","description":"A function to call when a token can be consumed. The function will be passed a callback argument, which must be called to allow the bucket to continue to work","type":[[["CallbackFunction"]]]},{"name":"short","optional":true,"default":"false","type":[[["boolean"]]]}],"returns":[[["void"]]],"meta":{"line":83,"file":"sequentialBucket.ts","path":"src/util"}},{"name":"toString","returns":[[["string"]]],"meta":{"line":92,"file":"sequentialBucket.ts","path":"src/util"}}],"meta":{"line":15,"file":"sequentialBucket.ts","path":"src/util"}}],"typedefs":[{"name":"SlashCommandOptions","description":"The options for a {@link SlashCommand}.","meta":{"line":7,"file":"command.ts","path":"src"},"props":[{"name":"deferEphemeral","description":"Whether responses from this command should defer ephemeral messages.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"guildIDs","description":"The guild ID(s) that this command will be assigned to.","optional":true,"type":[[["string"," | "],["Array","<"],["string",">"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The command's options.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"requiredPermissions","description":"The required permission(s) for this command.","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"throttling","description":"The throttling options for the command.","optional":true,"type":[[["ThrottlingOptions"]]]},{"name":"unknown","description":"Whether this command is used for unknown commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ThrottleObject","access":"private","meta":{"line":35,"file":"command.ts","path":"src"},"props":[{"name":"start","type":[[["number"]]]},{"name":"timeout","type":[[["any"]]]},{"name":"usages","type":[[["number"]]]}]},{"name":"ThrottlingOptions","description":"The throttling options for a {@link SlashCommand}.","meta":{"line":27,"file":"command.ts","path":"src"},"props":[{"name":"duration","description":"Amount of time to count the usages of the command within (in seconds).","type":[[["number"]]]},{"name":"usages","description":"Maximum number of usages of the command allowed in the time frame.","type":[[["number"]]]}]},{"name":"CommandOptionType","description":"An object mapping the types a command option can use.","meta":{"line":41,"file":"constants.ts","path":"src"},"props":[{"name":"BOOLEAN","description":"A boolean.","type":[[["5"]]]},{"name":"CHANNEL","description":"A channel, this would return the channel's ID in the interaction.","type":[[["7"]]]},{"name":"INTEGER","description":"An integer.","type":[[["4"]]]},{"name":"ROLE","description":"A role, this would return the role's ID in the interaction.","type":[[["8"]]]},{"name":"STRING","description":"A string.","type":[[["3"]]]},{"name":"SUB_COMMAND","description":"A sub-command for the application's command","type":[[["1"]]]},{"name":"SUB_COMMAND_GROUP","description":"A group of sub-commands","type":[[["2"]]]},{"name":"USER","description":"A user, this would return the user's ID in the interaction.","type":[[["6"]]]}]},{"name":"InteractionResponseFlags","description":"Message flags for interaction responses.","meta":{"line":33,"file":"constants.ts","path":"src"},"props":[{"name":"EPHEMERAL","description":"Sends a message back to the invoker, similar to messages by Clyde.","type":[[["1 << 6"]]]}]},{"name":"InteractionType","description":"The types of interactions.","meta":{"line":13,"file":"constants.ts","path":"src"},"props":[{"name":"COMMAND","description":"A command invocation.","type":[[["2"]]]},{"name":"PING","description":"A ping.","type":[[["1"]]]}]},{"name":"InterationResponseType","description":"The types of interaction responses.","meta":{"line":21,"file":"constants.ts","path":"src"},"props":[{"name":"CHANNEL_MESSAGE_WITH_SOURCE","description":"Respond with a message, showing the user's input.","type":[[["4"]]]},{"name":"DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE","description":"Create a deferred message with source.","type":[[["5"]]]},{"name":"PONG","description":"Acknowledge a `PING`.","type":[[["1"]]]}]},{"name":"ApplicationCommand","description":"An application command in Discord.","access":"private","meta":{"line":83,"file":"constants.ts","path":"src"},"props":[{"name":"application_id","description":"The application's ID responsible for this command.","type":[[["string"]]]},{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"guild_id","description":"The guild ID this comamnd is exlusive to.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"id","description":"The command's ID.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The optoins for the command.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"version","description":"The version ID of the command.","type":[[["string"]]]}]},{"name":"ApplicationCommandOption","description":"An option in an application command.","meta":{"line":95,"file":"constants.ts","path":"src"},"props":[{"name":"choices","description":"The choices of the option. If set, these are the only values a user can pick from.","optional":true,"type":[[["Array","<"],["ApplicationCommandOptionChoice",">"]]]},{"name":"default","description":"The first required option the user has to complete.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"description","description":"The description of the option.","type":[[["string"]]]},{"name":"name","description":"The name of the option.","type":[[["string"]]]},{"name":"options","description":"The sub-options for the option. This can only be used for sub-commands and sub-command groups.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]},{"name":"required","description":"Whether the command is required.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"type","description":"The type of option this one is.","type":[[["CommandOptionType"]]]}]},{"name":"ApplicationCommandOptionChoice","description":"A choice for a user to pick from.","meta":{"line":113,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name of the choice.","type":[[["string"]]]},{"name":"value","description":"The value of the choice.","type":[[["string"," | "],["number"]]]}]},{"name":"CommandBooleanOption","access":"private","meta":{"line":290,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType","."],["BOOLEAN"]]]},{"name":"value","type":[[["boolean"]]]}]},{"name":"CommandData","access":"private","meta":{"line":243,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"resolved","optional":true,"type":[[["undefined"," | {"],["\nchannels",": "],["undefined"," | {},"],["\nmembers",": "],["undefined"," | {},"],["\nroles",": "],["undefined"," | {},"],["\nusers",": "],["undefined"," | {}"],["\n","}"]]]}]},{"name":"CommandIntegerOption","access":"private","meta":{"line":282,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType","."],["INTEGER"]]]},{"name":"value","type":[[["number"]]]}]},{"name":"CommandMember","access":"private","meta":{"line":200,"file":"constants.ts","path":"src"},"props":[{"name":"deaf","type":[[["boolean"]]]},{"name":"is_pending","type":[[["boolean"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"mute","type":[[["boolean"]]]},{"name":"nick","type":[[["string"," | "],["null"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"premium_since","type":[[["string"," | "],["null"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]},{"name":"user","type":[[["CommandUser"]]]}]},{"name":"CommandOption","see":[],"access":"private","deprecated":true,"meta":{"line":266,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["CommandOptionType"]]]},{"name":"value","optional":true,"type":[[["string"," | "],["number"," | "],["boolean"]]]}]},{"name":"CommandStringOption","access":"private","meta":{"line":274,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"type","optional":true,"type":[[["STRING"," | "],["USER"," | "],["CHANNEL"," | "],["ROLE"]]]},{"name":"value","type":[[["string"]]]}]},{"name":"CommandSubcommandOption","access":"private","meta":{"line":298,"file":"constants.ts","path":"src"},"props":[{"name":"name","description":"The name for the option.","type":[[["string"]]]},{"name":"options","optional":true,"type":[[["Array","<"],["AnyCommandOption",">"]]]},{"name":"type","optional":true,"type":[[["SUB","_"],["COMMAND"," | "],["SUB","_"],["COMMAND","_"],["GROUP"]]]}]},{"name":"CommandUser","access":"private","meta":{"line":208,"file":"constants.ts","path":"src"},"props":[{"name":"avatar","type":[[["string"," | "],["null"]]]},{"name":"discriminator","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"public_flags","type":[[["number"]]]},{"name":"username","type":[[["string"]]]}]},{"name":"DMInteractionRequestData","description":"A command interaction within a direct message.","access":"private","meta":{"line":158,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["COMMAND"]]]},{"name":"user","type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"GuildInteractionRequestData","description":"A command interaction within a guild.","access":"private","meta":{"line":172,"file":"constants.ts","path":"src"},"props":[{"name":"channel_id","type":[[["string"]]]},{"name":"data","type":[[["CommandData"]]]},{"name":"guild_id","type":[[["string"]]]},{"name":"id","type":[[["string"]]]},{"name":"member","type":[[["CommandMember"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["COMMAND"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"PartialApplicationCommand","description":"An partial application command in Discord.","access":"private","meta":{"line":64,"file":"constants.ts","path":"src"},"props":[{"name":"description","description":"The description of the command.","type":[[["string"]]]},{"name":"name","description":"The name of the command.","type":[[["string"]]]},{"name":"options","description":"The optoins for the command.","optional":true,"type":[[["Array","<"],["ApplicationCommandOption",">"]]]}]},{"name":"PingRequestData","description":"A ping interaction.","access":"private","meta":{"line":146,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["PING"]]]},{"name":"user","optional":true,"type":[[["CommandUser"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RawRequest","access":"private","meta":{"line":121,"file":"constants.ts","path":"src"},"props":[{"name":"auth","type":[[["boolean"]]]},{"name":"body","type":[[["any"]]]},{"name":"method","type":[[["string"]]]},{"name":"resp","type":[[["IncomingMessage"]]]},{"name":"route","type":[[["string"]]]},{"name":"short","type":[[["boolean"]]]},{"name":"url","type":[[["string"]]]}]},{"name":"RequestData","access":"private","meta":{"line":135,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"token","type":[[["string"]]]},{"name":"type","type":[[["InteractionType"]]]},{"name":"version","type":[[["1"]]]}]},{"name":"RequireAllOptions","see":["https://www.npmjs.com/package/require-all#usage"],"meta":{"line":306,"file":"constants.ts","path":"src"},"props":[{"name":"dirname","type":[[["string"]]]},{"name":"excludeDirs","optional":true,"type":[[["RegExp"]]]},{"name":"filter","optional":true,"type":[[["("],["name",": "],["string",", "],["path",": "],["string",") => "],["string"," | "],["false"," | "],["undefined"," | "],["RegExp"]]]},{"name":"map","optional":true,"type":[[["undefined"," | ("],["name",": "],["string",", "],["path",": "],["string",") => "],["string"]]]},{"name":"recursive","optional":true,"type":[[["true"," | "],["false"]]]},{"name":"resolve","optional":true,"type":[[["undefined"," | ("],["module",": "],["any",") => "],["any"]]]}]},{"name":"ResolvedChannel","access":"private","meta":{"line":229,"file":"constants.ts","path":"src"},"props":[{"name":"id","type":[[["string"]]]},{"name":"name","type":[[["string"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"type","type":[[["number"]]]}]},{"name":"ResolvedMemberData","access":"private","meta":{"line":190,"file":"constants.ts","path":"src"},"props":[{"name":"is_pending","type":[[["boolean"]]]},{"name":"joined_at","type":[[["string"]]]},{"name":"nick","type":[[["string"," | "],["null"]]]},{"name":"pending","type":[[["boolean"]]]},{"name":"premium_since","type":[[["string"," | "],["null"]]]},{"name":"roles","type":[[["Array","<"],["string",">"]]]}]},{"name":"ResolvedRole","access":"private","meta":{"line":217,"file":"constants.ts","path":"src"},"props":[{"name":"color","type":[[["number"]]]},{"name":"hoist","type":[[["boolean"]]]},{"name":"id","type":[[["string"]]]},{"name":"managed","type":[[["boolean"]]]},{"name":"mentionable","type":[[["boolean"]]]},{"name":"name","type":[[["string"]]]},{"name":"permissions","type":[[["string"]]]},{"name":"position","type":[[["number"]]]}]},{"name":"AnyCommandOption","access":"private","type":[[["CommandStringOption"," | "],["CommandIntegerOption"," | "],["CommandBooleanOption"," | "],["CommandSubcommandOption"]]],"meta":{"line":256,"file":"constants.ts","path":"src"}},{"name":"AnyRequestData","description":"Any interaction request from Discord.","type":[[["PingRequestData"," | "],["InteractionRequestData"]]],"meta":{"line":132,"file":"constants.ts","path":"src"}},{"name":"ImageFormat","description":"Any image format supported by Discord.","type":[[["unknown"," | "],["unknown"," | "],["unknown"," | "],["unknown"," | "],["unknown"]]],"meta":{"line":316,"file":"constants.ts","path":"src"}},{"name":"InteractionRequestData","description":"Any command interaction.","access":"private","type":[[["DMInteractionRequestData"," | "],["GuildInteractionRequestData"]]],"meta":{"line":187,"file":"constants.ts","path":"src"}},{"name":"EditMessageOptions","description":"The options for {@link CommandContext#edit}.","meta":{"line":23,"file":"context.ts","path":"src"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["any",">"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]}]},{"name":"FollowUpMessageOptions","description":"The options for {@link CommandContext#sendFollowUp}.","meta":{"line":47,"file":"context.ts","path":"src"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["any",">"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"MessageFile","description":"A file within {@link EditMessageOptions}.","meta":{"line":39,"file":"context.ts","path":"src"},"props":[{"name":"file","description":"The attachment to send.","type":[[["Buffer"]]]},{"name":"name","description":"The name of the file.","type":[[["string"]]]}]},{"name":"MessageOptions","description":"The options for {@link CommandContext#send}.","meta":{"line":55,"file":"context.ts","path":"src"},"props":[{"name":"allowedMentions","description":"The mentions allowed to be used in this message.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"content","description":"The message content.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"embeds","description":"The embeds of the message.","optional":true,"type":[[["Array","<"],["any",">"]]]},{"name":"ephemeral","description":"Whether or not the message should be ephemeral.\nIgnored if `flags` is defined.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"file","description":"The attachment(s) to send with the message.\nNote that ephemeral messages and initial messages cannot have\nattachments.","optional":true,"type":[[["MessageFile"," | "],["Array","<"],["MessageFile",">"]]]},{"name":"flags","description":"The flags to use in the message.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"tts","description":"Whether to use TTS for the content.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"ConvertedOption","description":"Command options converted for ease of use.","type":[[["{} | "],["string"," | "],["number"," | "],["boolean"]]],"meta":{"line":20,"file":"context.ts","path":"src"}},{"name":"SlashCreatorEvents","description":"The events typings for the {@link SlashCreator}.","access":"private","meta":{"line":30,"file":"creator.ts","path":"src"},"props":[{"name":"commandBlock","type":[[["("],["command",": "],["SlashCommand",", "],["ctx",": "],["CommandContext",", "],["reason",": "],["string",", "],["data",": "],["any",") => "],["void"]]]},{"name":"commandError","type":[[["("],["command",": "],["SlashCommand",", "],["err",": "],["Error",", "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandRegister","type":[[["("],["command",": "],["SlashCommand",", "],["creator",": "],["SlashCreator",") => "],["void"]]]},{"name":"commandReregister","type":[[["("],["command",": "],["SlashCommand",", "],["oldCommand",": "],["SlashCommand",") => "],["void"]]]},{"name":"commandRun","type":[[["("],["command",": "],["SlashCommand",", "],["promise",": "],["Promise","<"],["any",">, "],["ctx",": "],["CommandContext",") => "],["void"]]]},{"name":"commandUnregister","type":[[["("],["command",": "],["SlashCommand",") => "],["void"]]]},{"name":"debug","type":[[["("],["message",": "],["string",") => "],["void"]]]},{"name":"error","type":[[["("],["err",": "],["Error",") => "],["void"]]]},{"name":"ping","type":[[["("],["user",": "],["CommandUser",") => "],["void"]]]},{"name":"rawREST","type":[[["("],["request",": "],["RawRequest",") => "],["void"]]]},{"name":"synced","type":[[["(..."],["args",": "],["unknown","[]) => "],["void"]]]},{"name":"unknownInteraction","type":[[["("],["interaction",": "],["any",") => "],["void"]]]},{"name":"unverifiedRequest","type":[[["("],["treq",": "],["TransformedRequest",") => "],["void"]]]},{"name":"warn","type":[[["("],["warning",": "],["Error"," | "],["string",") => "],["void"]]]}]},{"name":"SlashCreatorOptions","description":"The options for the {@link SlashCreator}.","meta":{"line":48,"file":"creator.ts","path":"src"},"props":[{"name":"agent","description":"A HTTP Agent used to proxy requests","optional":true,"type":[[["HTTPS","."],["Agent"]]]},{"name":"allowedMentions","description":"The default allowed mentions for all messages.","optional":true,"type":[[["MessageAllowedMentions"]]]},{"name":"applicationID","description":"Your Application's ID","type":[[["string"]]]},{"name":"defaultImageFormat","description":"The default format to provide user avatars in.","optional":true,"type":[[["ImageFormat"]]]},{"name":"defaultImageSize","description":"The default image size to provide user avatars in.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"endpointPath","description":"The path where the server will listen for interactions.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"latencyThreshold","description":"The average latency where SlashCreate will start emitting warnings for.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"maxSignatureTimestamp","description":"A number of milliseconds before requests with a timestamp past that time get rejected.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"publicKey","description":"The public key for your application.\nRequired for webservers.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"ratelimiterOffset","description":"A number of milliseconds to offset the ratelimit timing calculations by.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"requestTimeout","description":"A number of milliseconds before requests are considered timed out.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"serverHost","description":"The host where the server will listen on.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"serverPort","description":"The port where the server will listen on.","optional":true,"type":[[["undefined"," | "],["number"]]]},{"name":"token","description":"The bot/client token for the application.\nRecommended to set this in your config.","optional":true,"type":[[["undefined"," | "],["string"]]]},{"name":"unknownCommandResponse","description":"Whether to respond to an unknown command with an ephemeral message.\nIf an unknown command is registered, this is ignored.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"SyncCommandOptions","description":"The options for {@link SlashCreator#syncCommands}.","meta":{"line":91,"file":"creator.ts","path":"src"},"props":[{"name":"deleteCommands","description":"Whether to delete commands that do not exist in the creator.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"skipGuildErrors","description":"Whether to skip over guild syncing errors.\nGuild syncs most likely can error if that guild no longer exists.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]},{"name":"syncGuilds","description":"Whether to sync guild-specific commands.","optional":true,"type":[[["undefined"," | "],["false"," | "],["true"]]]}]},{"name":"Response","description":"A general HTTP response.","access":"private","meta":{"line":27,"file":"server.ts","path":"src"},"props":[{"name":"body","description":"The body of the response.","optional":true,"type":[[["any"]]]},{"name":"headers","description":"The headers for the response.","optional":true,"type":[[["undefined"," | {}"]]]},{"name":"status","description":"The status code for the response.","optional":true,"type":[[["undefined"," | "],["number"]]]}]},{"name":"ServerOptions","description":"Options for a {@link Server}.","meta":{"line":6,"file":"server.ts","path":"src"},"props":[{"name":"alreadyListening","description":"Whether or not the server is already listening to a port.","type":[[["boolean"]]]}]},{"name":"TransformedRequest","description":"A general HTTP request.","meta":{"line":12,"file":"server.ts","path":"src"},"props":[{"name":"body","description":"The body of the request.","type":[[["any"]]]},{"name":"headers","description":"The headers of the request.","type":[[["{}"]]]},{"name":"request","description":"The request class from a Server, depending on what server it is.","type":[[["any"]]]},{"name":"response","description":"The response class from a Server, depending on what server it is.","type":[[["any"]]]}]},{"name":"InteractionHandler","access":"private","type":[[["("],["interaction",": "],["AnyRequestData",") => "],["void"]]],"meta":{"line":52,"file":"server.ts","path":"src"},"params":[{"name":"interaction","type":[[["AnyRequestData"]]]}],"returns":[[["void"]]]},{"name":"RequestHandler","access":"private","type":[[["("],["treq",": "],["TransformedRequest",", "],["respond",": "],["RespondFunction",") => "],["void"]]],"meta":{"line":46,"file":"server.ts","path":"src"},"params":[{"name":"treq","type":[[["TransformedRequest"]]]},{"name":"respond","type":[[["RespondFunction"]]]}],"returns":[[["void"]]]},{"name":"RespondFunction","access":"private","type":[[["("],["response",": "],["Response",") => "],["Promise","<"],["void",">"]]],"meta":{"line":40,"file":"server.ts","path":"src"},"params":[{"name":"response","type":[[["Response"]]]}],"returns":[[["Promise","<"],["void",">"]]]},{"name":"EventHandler","access":"private","type":[[["("],["handler",": "],["InteractionHandler",") => "],["void"]]],"meta":{"line":4,"file":"gateway.ts","path":"src/servers"},"params":[{"name":"handler","type":[[["InteractionHandler"]]]}],"returns":[[["void"]]]},{"name":"FormattedAllowedMentions","description":"The formatted allowed_mentions for Discord.","access":"private","meta":{"line":42,"file":"util.ts","path":"src"},"props":[{"name":"parse","type":[[["Array","<"],["unknown"," | "],["unknown"," | "],["unknown",">"]]]},{"name":"roles","optional":true,"type":[[["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["Array","<"],["string",">"]]]}]},{"name":"MessageAllowedMentions","description":"The allowed mentions for a {@link Message}.","meta":{"line":32,"file":"util.ts","path":"src"},"props":[{"name":"everyone","type":[[["boolean"]]]},{"name":"roles","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]},{"name":"users","optional":true,"type":[[["boolean"," | "],["Array","<"],["string",">"]]]}]},{"name":"BitFieldResolvable","type":[[["string"," | "],["number"," | "],["bigint"," | "],["BitField"," | "],["Array","<"],["BitFieldResolvable",">"]]],"meta":{"line":2,"file":"bitfield.ts","path":"src/util"}}]}